-- 
-- Script was generated by Devart dbForge Studio for MySQL, Version 6.3.341.0
-- Product Home Page: http://www.devart.com/dbforge/mysql/studio
-- Script date 10/28/2015 6:00:00 PM
-- Server version: 5.6.26
-- Run this script against osae to synchronize it with osae_047
-- Please backup your target database before running this script
-- 

--
-- Disable foreign keys
--
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;

USE osae;


--
-- Drop view "osae_v_object_state_list_active"
--
DROP VIEW IF EXISTS osae_v_object_state_list_active CASCADE;

DELIMITER $$

--
-- Drop procedure "osae_sp_system_count_container_occupants"
--
DROP PROCEDURE IF EXISTS osae_sp_system_count_container_occupants$$

--
-- Drop procedure "osae_sp_process_system_methods"
--
DROP PROCEDURE IF EXISTS osae_sp_process_system_methods$$

DELIMITER ;

--
-- Alter table "osae_object_type_event_script"
--
ALTER TABLE osae_object_type_event_script
  DROP FOREIGN KEY FK_osae_object_type_event_script_osae_object_type_event_event_id;
ALTER TABLE osae_object_type_event_script
  ADD CONSTRAINT FK_osae_object_type_event_script_osae_object_type_event_event_id FOREIGN KEY (event_id)
    REFERENCES osae_object_type_event(event_id) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE osae_object_type_event_script
  DROP FOREIGN KEY FK_osae_object_type_event_script_osae_object_type_object_type_id;
ALTER TABLE osae_object_type_event_script
  ADD CONSTRAINT FK_osae_object_type_event_script_osae_object_type_object_type_id FOREIGN KEY (object_type_id)
    REFERENCES osae_object_type(object_type_id) ON DELETE CASCADE ON UPDATE CASCADE;


DELIMITER $$
DROP PROCEDURE IF EXISTS osae_sp_object_add$$
CREATE DEFINER = 'root'@'localhost'
PROCEDURE osae_sp_object_history_clear()
BEGIN
DELETE FROM osae_object_state_history;
DELETE FROM osae_object_state_change_history;
DELETE FROM osae_object_property_history;
END

$$

--
-- Alter procedure "osae_sp_object_add"
--
DROP PROCEDURE IF EXISTS osae_sp_object_add$$
CREATE PROCEDURE osae_sp_object_add(IN pname VARCHAR(100), IN palias VARCHAR(100), IN pdescription VARCHAR(200), IN pobjecttype VARCHAR(200), IN paddress VARCHAR(200), IN pcontainer VARCHAR(200), IN penabled TINYINT(1), OUT results INTEGER)
BEGIN
  DECLARE vObjectCount     INT;
  DECLARE vObjectTypeCount INT;
  DECLARE iContainer       INT;
  DECLARE iObjectID        INT;
  DECLARE vObjectTypeID    INT;
  DECLARE vContainerCount  INT;
  DECLARE vContainerID     INT DEFAULT NULL;
  SET results = 1;

  SELECT count(object_type_id) INTO vObjectTypeCount FROM osae_object_type WHERE object_type = pobjecttype;
  IF vObjectTypeCount > 0 THEN
    SELECT object_type_id, container INTO vObjectTypeID, iContainer FROM osae_object_type WHERE  object_type = pobjecttype;
    SELECT count(object_id) INTO vContainerCount FROM osae_v_object WHERE object_name = pcontainer AND container = 1;
    IF vContainerCount = 1 THEN
      SELECT object_id INTO vContainerID FROM osae_v_object WHERE object_name = pcontainer AND container = 1;
    END IF;
    SELECT count(object_id) INTO vObjectCount FROM osae_object WHERE upper(object_name) = upper(pname) OR upper(object_alias) = upper(pname) OR (upper(address) = upper(paddress) AND address IS NOT NULL AND address <> '');
    IF vObjectCount = 0 THEN
      INSERT INTO osae_object (object_name, object_alias, object_description, object_type_id, address, container_id, enabled) VALUES (pname, palias, pdescription, vObjectTypeID, paddress, vContainerID, penabled);
    ELSE
      CALL osae_sp_debug_log_add(concat('Object_Add Failed to Add ', pname, ' due to duplicate data.'), 'SYSTEM');
      SET results = 3;
    END IF;                                                                                 
    IF iContainer = 1 AND vContainerCount = 0 THEN
      SELECT object_id INTO iObjectID FROM osae_object WHERE object_name = pname;
      UPDATE osae_object SET container_id = iObjectID WHERE object_id = iObjectID;
    END IF;
  ELSE
    SET results = 2;
  END IF;
END
$$

--
-- Alter procedure "osae_sp_object_property_set"
--
DROP PROCEDURE IF EXISTS osae_sp_object_property_set$$
CREATE PROCEDURE osae_sp_object_property_set(IN pname varchar(200), IN pproperty varchar(200), IN pvalue varchar(4000), IN pfromobject varchar(200), IN pdebuginfo varchar(2000))
BEGIN
DECLARE vObjectID INT DEFAULT 0;
DECLARE vObjectCount INT DEFAULT 0;
DECLARE vObjectTypeID INT DEFAULT 0;
DECLARE vObjectTypePropertyID INT DEFAULT 0;
DECLARE vPropertyID INT DEFAULT 0;
DECLARE vPropertyValue VARCHAR(4000);
DECLARE vPropertyCount INT DEFAULT 0;
DECLARE vOldTrustLevel INT DEFAULT 0;
DECLARE vNewTrustLevel INT DEFAULT 50;
DECLARE vEventCount INT;
DECLARE vDebugTrace VARCHAR(2000) DEFAULT '';
    SET vDebugTrace = CONCAT(pdebuginfo,' -> osae_sp_object_property_set');
    SELECT COUNT(object_id) INTO vObjectCount FROM osae_object WHERE UPPER(object_name)=UPPER(pname) OR UPPER(object_alias)=UPPER(pname) LIMIT 1; 
    IF vObjectCount  = 1 THEN  
        SELECT object_id,object_type_id INTO vObjectID,vObjectTypeID FROM osae_object WHERE UPPER(object_name)=UPPER(pname) OR UPPER(object_alias)=UPPER(pname) LIMIT 1;
        SELECT COUNT(property_id),trust_level,object_type_property_id INTO vPropertyCount,vOldTrustLevel,vObjectTypePropertyID FROM osae_v_object_property WHERE (UPPER(object_name)=UPPER(pname) OR UPPER(object_alias)=UPPER(pname)) AND UPPER(property_name)=UPPER(pproperty) AND (property_value IS NULL OR property_value != pvalue); # AND object_type="PERSON";        
        IF vPropertyCount > 0 THEN
            SELECT property_value INTO vNewTrustLevel FROM osae_v_object_property WHERE UPPER(object_name)=UPPER(pfromobject) AND UPPER(property_name)='TRUST LEVEL';
            SELECT property_id,COALESCE(property_value,'') INTO vPropertyID, vPropertyValue FROM osae_v_object_property WHERE (UPPER(object_name)=UPPER(pname) OR UPPER(object_alias)=UPPER(pname)) AND UPPER(property_name)=UPPER(pproperty) AND (property_value IS NULL OR property_value != pvalue);
            #Insert Trust Level Rejection Code Here, maybe shppech command until converstaion tracking is in
            UPDATE osae_object_property SET property_value=pvalue,trust_level=vNewTrustLevel,source_name=pfromobject,interest_level=0 WHERE object_id=vObjectID AND object_type_property_id=vPropertyID;
            #Updating a property is causing nesting because of the following line.   Maybe last updated needs to be a property.
            #UPDATE osae_object SET last_updated=NOW() WHERE object_id=vObjectID;            
            SELECT COUNT(event_id) INTO vEventCount FROM osae_object_type_event WHERE object_type_id=vObjectTypeID AND UPPER(event_name)=UPPER(pproperty);
            IF vEventCount > 0 THEN  
                CALL osae_sp_event_log_add(pname,pproperty,pfromobject,vDebugTrace,pvalue,NULL);
            END IF;

            #Since this property has changed, it has generated interest
            UPDATE osae_object_property SET interest_level = interest_level + 1 WHERE object_type_property_id = vObjectTypePropertyID AND (property_value IS NULL OR property_value = '');
        END IF;
    END IF; 
END
$$

--
-- Alter procedure "osae_sp_object_type_event_add"
--
DROP PROCEDURE IF EXISTS osae_sp_object_type_event_add$$
CREATE PROCEDURE osae_sp_object_type_event_add(IN pobjecttype VARCHAR(200), IN pname VARCHAR(200), IN plabel VARCHAR(200))
BEGIN
DECLARE vObjectTypeCount INT;
DECLARE vObjectTypeID INT;
    SELECT COUNT(object_type_id) INTO vObjectTypeCount FROM osae_object_type WHERE object_type=pobjecttype;
    IF vObjectTypeCount > 0 THEN
        SELECT object_type_id INTO vObjectTypeID FROM osae_object_type WHERE object_type=pobjecttype;
        INSERT INTO osae_object_type_event (event_name,event_label,object_type_id) VALUES(UPPER(pname),plabel,vObjectTypeID) ON DUPLICATE KEY UPDATE event_label=plabel,object_type_id=vObjectTypeID;
    END IF; 
END
$$

--
-- Alter procedure "osae_sp_object_type_export"
--
DROP PROCEDURE IF EXISTS osae_sp_object_type_export$$
CREATE PROCEDURE osae_sp_object_type_export(IN pObjectType VARCHAR(255))
BEGIN
  DECLARE vObjectType VARCHAR(200);
  DECLARE vResults TEXT;
  DECLARE vDescription VARCHAR(200);
  DECLARE vOwner VARCHAR(200);
  DECLARE vBaseType VARCHAR(200);
  DECLARE vTypeOwner INT;
  DECLARE vSystemType INT;
  DECLARE vContainer INT;
  DECLARE vHideRedundant INT;
  DECLARE v_finished INT; 
  DECLARE vName VARCHAR(200);
  DECLARE vLabel VARCHAR(200);
  DECLARE vParam1Name VARCHAR(200);
  DECLARE vParam1Default VARCHAR(200);
  DECLARE vParam2Name VARCHAR(200);
  DECLARE vParam2Default VARCHAR(200);
  DECLARE vDataType VARCHAR(200);
  DECLARE vDefault VARCHAR(200);
  DECLARE vTrackHistory VARCHAR(200);
  DECLARE vPropertyObjectType VARCHAR(200);

  DECLARE state_cursor CURSOR FOR SELECT state_name,state_label FROM osae_v_object_type_state WHERE object_type=vObjectType;
  DECLARE event_cursor CURSOR FOR SELECT event_name,event_label FROM osae_v_object_type_event WHERE object_type=vObjectType;
  DECLARE method_cursor CURSOR FOR SELECT method_name,method_label,param_1_label,param_1_default,param_2_label,param_2_default FROM osae_v_object_type_method WHERE object_type=vObjectType;
  DECLARE property_cursor CURSOR FOR SELECT property_name,property_datatype,property_default,property_object_type,track_history FROM osae_v_object_type_property WHERE object_type=vObjectType;
  DECLARE property_option_cursor CURSOR FOR SELECT property_name,property_datatype,property_default,track_history FROM osae_v_object_type_property_option WHERE object_type=vObjectType;

  DECLARE CONTINUE HANDLER FOR NOT FOUND SET v_finished = TRUE;

  #SET vObjectType = CONCAT(objectName,'2');

  SELECT object_type,object_type_description,COALESCE(object_name,''),base_type,object_type_owner,system_hidden,container,hide_redundant_events INTO vObjectType,vDescription,vOwner,vBaseType,vTypeOwner,vSystemType,vContainer,vHideRedundant FROM osae_v_object_type WHERE object_type=pObjectType;
  SET vResults = CONCAT('CALL osae_sp_object_type_add (\'', REPLACE(vObjectType,'\'','\\\''),'\',\'',REPLACE(vDescription,'\'','\\\''),'\',\'',vOwner,'\',\'',vBaseType,'\',',vTypeOwner,',', vSystemType,',',vContainer,',',vHideRedundant,');','\r\n');

  OPEN state_cursor;
    get_states: LOOP
    SET v_finished = FALSE;
      FETCH state_cursor INTO vName,vLabel;
      IF v_finished THEN 
        LEAVE get_states;
      END IF;
      SET vResults = CONCAT(vResults,'CALL osae_sp_object_type_state_add(\'',REPLACE(vObjectType,'\'','\\\''),'\',\'',REPLACE(vName,'\'','\\\''),'\',\'',REPLACE(vLabel,'\'','\\\''),'\');','\r\n');
    END LOOP get_states;
  CLOSE state_cursor;


  OPEN event_cursor;
  get_events: LOOP
    SET v_finished = FALSE;
    FETCH event_cursor INTO vName,vLabel;
    IF v_finished THEN 
      LEAVE get_events;
    END IF;
    SET vResults = CONCAT(vResults,'CALL osae_sp_object_type_event_add(\'',REPLACE(vObjectType,'\'','\\\''),'\',\'',REPLACE(vName,'\'','\\\''),'\',\'',REPLACE(vLabel,'\'','\\\''),'\');','\r\n');
  END LOOP get_events;
  CLOSE event_cursor;

  OPEN method_cursor;
  get_methods: LOOP
    SET v_finished = FALSE;
    FETCH method_cursor INTO vName,vLabel,vParam1Name,vParam1Default,vParam2Name,vParam2Default;
    IF v_finished THEN 
      LEAVE get_methods;
    END IF;
    SET vResults = CONCAT(vResults,'CALL osae_sp_object_type_method_add(\'',REPLACE(vObjectType,'\'','\\\''),'\',\'',REPLACE(vName,'\'','\\\''),'\',\'',REPLACE(vLabel,'\'','\\\''),'\',\'',vParam1Name,'\',\'',vParam2Name,'\',\'',vParam1Default,'\',\'',vParam2Default,'\');','\r\n');
  END LOOP get_methods;
  CLOSE method_cursor;
  SET v_finished = 0;

  OPEN property_cursor;
  get_properties: LOOP
    SET v_finished = FALSE;
    FETCH property_cursor INTO vName,vDataType,vDefault,vPropertyObjectType,vTrackHistory;
    IF v_finished THEN 
      LEAVE get_properties;
    END IF;
    SET vResults = CONCAT(vResults,'CALL osae_sp_object_type_property_add(\'',REPLACE(vObjectType,'\'','\\\''),'\',\'',REPLACE(vName,'\'','\\\''),'\',\'',vDataType,'\',\'',vPropertyObjectType,'\',\'',vDefault,'\',',vTrackHistory,');','\r\n');
  END LOOP get_properties;
  CLOSE property_cursor;

  SELECT vResults;
END
$$

--
-- Alter procedure "osae_sp_object_type_method_add"
--
DROP PROCEDURE IF EXISTS osae_sp_object_type_method_add$$
CREATE PROCEDURE osae_sp_object_type_method_add(IN pobjecttype VARCHAR(200), IN pname VARCHAR(200), IN plabel VARCHAR(200), IN pparam1 VARCHAR(100), IN pparam2 VARCHAR(100), IN pparam1default VARCHAR(1024), IN pparam2default VARCHAR(1024))
BEGIN
DECLARE vObjectTypeCount INT;
DECLARE vObjectTypeID INT;
    SELECT COUNT(object_type_id) INTO vObjectTypeCount FROM osae_object_type WHERE object_type=pobjecttype;
    IF vObjectTypeCount > 0 THEN
        SELECT object_type_id INTO vObjectTypeID FROM osae_object_type WHERE object_type=pobjecttype;
        INSERT INTO osae_object_type_method (method_name,method_label,object_type_id,param_1_label,param_2_label,param_1_default,param_2_default) VALUES(UPPER(pname),plabel,vObjectTypeID,pparam1,pparam2,pparam1default,pparam2default) ON DUPLICATE KEY UPDATE method_label=plabel,object_type_id=vObjectTypeID,param_1_label=pparam1,param_2_label=pparam2,param_1_default=pparam1default,param_2_default=pparam2default;
    END IF; 
END
$$

--
-- Alter procedure "osae_sp_object_type_property_add"
--
DROP PROCEDURE IF EXISTS osae_sp_object_type_property_add$$
CREATE PROCEDURE osae_sp_object_type_property_add(
  IN  pobjecttype    varchar(200),
  IN  ppropertyname          varchar(200),
  IN  ppropertytype     varchar(50),
  IN  ppropertyobjecttype     varchar(200),
  IN  pdefault       varchar(255),
  IN  ptrackhistory  tinyint(1)
)
BEGIN
DECLARE vObjectTypeCount INT;
DECLARE vObjectTypeID INT;
DECLARE vPropertyObjectTypeCount INT;
DECLARE vPropertyObjectTypeID INT;

    SELECT COUNT(object_type_id) INTO vObjectTypeCount FROM osae_object_type WHERE object_type=pobjecttype;
    IF vObjectTypeCount > 0 THEN
        SELECT object_type_id INTO vObjectTypeID FROM osae_object_type WHERE object_type=pobjecttype;
        IF UPPER(ppropertytype) = 'OBJECTTYPE' THEN
            SELECT COUNT(object_type_id) INTO vPropertyObjectTypeCount FROM osae_object_type WHERE UPPER(object_type)=UPPER(ppropertyobjecttype);
            IF vPropertyObjectTypeCount > 0 THEN
                SELECT object_type_id INTO vPropertyObjectTypeID FROM osae_object_type WHERE UPPER(object_type)=UPPER(ppropertyobjecttype);
            END IF;
        END IF;
        INSERT INTO osae_object_type_property (property_name,property_datatype,property_object_type_id,property_default,object_type_id,track_history) VALUES(ppropertyname,ppropertytype,vPropertyObjectTypeID,pdefault,vObjectTypeID,ptrackhistory) ON DUPLICATE KEY UPDATE property_datatype=ppropertytype,object_type_id=vObjectTypeID;
    END IF; 
END
$$

--
-- Alter procedure "osae_sp_object_type_state_add"
--
DROP PROCEDURE IF EXISTS osae_sp_object_type_state_add$$
CREATE PROCEDURE osae_sp_object_type_state_add(IN pobjecttype VARCHAR(200), IN pname VARCHAR(200), IN plabel VARCHAR(200))
BEGIN
DECLARE vObjectTypeCount INT;
DECLARE vObjectTypeID INT;
    SELECT COUNT(object_type_id) INTO vObjectTypeCount FROM osae_object_type WHERE object_type=pobjecttype;
    IF vObjectTypeCount > 0 THEN
        SELECT object_type_id INTO vObjectTypeID FROM osae_object_type WHERE object_type=pobjecttype;
        INSERT INTO osae_object_type_state (state_name,state_label,object_type_id) VALUES(UPPER(pname),plabel,vObjectTypeID) ON DUPLICATE KEY UPDATE state_label=plabel,object_type_id=vObjectTypeID;
    END IF; 
END
$$

--
-- Alter procedure "osae_sp_system_count_occupants"
--
DROP PROCEDURE IF EXISTS osae_sp_system_count_occupants$$
CREATE PROCEDURE osae_sp_system_count_occupants()
BEGIN
DECLARE vOccupantCount INT;
DECLARE vOldCount INT;
DECLARE vTemp VARCHAR(200);
DECLARE vOutput VARCHAR(200);
DECLARE bDone INT;
DECLARE var1 CHAR(40);
DECLARE var2 CHAR(40);
DECLARE oCount INT;
DECLARE oHouse CHAR(255);
DECLARE sContainerName CHAR(255);
DECLARE iContainerOccupants INT;
DECLARE iContainerOldOccupants INT;

DECLARE curs CURSOR FOR SELECT object_name FROM osae_v_object WHERE object_type='PERSON' AND state_name='ON';
DECLARE curs2 Cursor FOR SELECT object_name FROM osae_v_object WHERE object_type='ROOM' AND state_name='ON';
DECLARE CONTINUE HANDLER FOR NOT FOUND SET bDone = 1;
#  SET oHouse = (SELECT object_name FROM osae_v_object WHERE object_type='HOUSE');
 # SET vOldCount = (SELECT property_value FROM osae_v_object_property WHERE object_name=oHouse AND property_name='Occupant Count');
 # SELECT COUNT(object_id) INTO vOccupantCount FROM osae_v_object WHERE object_type='PERSON' AND state_name='ON';
 # IF vOldCount != vOccupantCount THEN
  #  CALL osae_sp_object_property_set(oHouse,'Occupant Count',vOccupantCount,'SYSTEM','osae_sp_system_count_occupants');
  #  CASE vOccupantCount
  #    WHEN 0 THEN 
   #     SET vOutput = 'Nobody is here';
   #     CALL osae_sp_object_property_set(oHouse,'Occupants',vOutput,'SYSTEM','osae_sp_system_count_occupants');
   #     CALL osae_sp_method_queue_add (oHouse,'OFF','','','SYSTEM','Auto-Occupancy Logic');          
  #    WHEN 1 THEN 
   #     SET vOutput = (SELECT COALESCE(object_name,'Nobody') FROM osae_v_object WHERE object_type='PERSON' AND state_name='ON' LIMIT 1);
   #     SET vOutput = CONCAT(vOutput,' is here');
   #     CALL osae_sp_object_property_set(oHouse,'Occupants',vOutput,'SYSTEM','osae_sp_system_count_occupants');
   #     CALL osae_sp_method_queue_add (oHouse,'ON','','','SYSTEM','Auto-Occupancy Logic');  
    #  ELSE
   #     OPEN curs;
   #       SET oCount = 0;
   #       SET bDone = 0;
   #       SET vOutput = '';
   #         REPEAT
   #           FETCH curs INTO var1;
   #           IF oCount < vOccupantCount THEN
   #             IF oCount = 0 THEN
   #               SET vOutput = CONCAT(vOutput,CONCAT(' and ', var1, ' are here'));
   #             ELSEIF oCount = 1 THEN
   #               SET vOutput = CONCAT(var1, vOutput);
   #             ELSE
    #              SET vOutput = CONCAT(var1, ', ', vOutput);
    #            END IF;
    #            SET oCount = oCount + 1;
     #         END IF;
  #          UNTIL bDone END REPEAT;
          
   #       CLOSE curs;
  #        CALL osae_sp_object_property_set(oHouse,'Occupants',vOutput,'SYSTEM','osae_sp_system_count_occupants');
  #        CALL osae_sp_method_queue_add (oHouse,'ON','','','SYSTEM','Auto-Occupancy Logic');  
   #     END CASE;
  #  END IF;

 #   SET vOldCount = 0;
 #   SET vOldCount = (SELECT COALESCE(property_value,0) FROM osae_v_object_property WHERE object_name='SYSTEM' AND property_name='Occupied Locations');
 #   SELECT COUNT(object_id) INTO vOccupantCount FROM osae_v_object WHERE object_type='ROOM' AND state_name='ON';
 #   #CALL osae_sp_debug_log_add(CONCAT('Counted Places: ',vOccupantCount, ' Old count = ',vOldCount),'SYSTEM');
 #   IF vOldCount != vOccupantCount THEN
  #      CALL osae_sp_object_property_set('SYSTEM','Occupied Room Count',vOccupantCount,'SYSTEM','osae_sp_system_count_occupants');
   #     CASE vOccupantCount
   #       WHEN 0 THEN 
    #        SET vOutput = 'All Locations are Vacant';
    #        CALL osae_sp_object_property_set('SYSTEM','Occupied Rooms',vOutput,'SYSTEM','osae_sp_system_count_occupants');            
    #      WHEN 1 THEN 
    #        SET vOutput = (SELECT object_name FROM osae_v_object WHERE object_type='PLACE' AND state_name='ON' LIMIT 1);
    #       SET vOutput = CONCAT('The ',vOutput,' is occupied');
   #         CALL osae_sp_object_property_set('SYSTEM','Occupied Rooms',vOutput,'SYSTEM','osae_sp_system_count_occupants');
    #      ELSE
    #        OPEN curs2;
   #         SET oCount = 0;
    #        SET bDone = 0;
    #        SET vOutput = '';
    #        REPEAT
    #          FETCH curs2 INTO var2;
     #         IF oCount < vOccupantCount THEN
     #           IF oCount = 0 THEN
     #             SET vOutput = CONCAT(vOutput,CONCAT(' and the ', var2, ' are occupied'));
      #          ELSEIF oCount = 1 THEN
     #             SET vOutput = CONCAT('the ', var2, vOutput);
       #         ELSE
       #           SET vOutput = CONCAT('the ', var2, ', ', vOutput);
       #         END IF;
      #          SET oCount = oCount + 1;
       #       END IF;
      #      UNTIL bDone END REPEAT;
          
      #      CLOSE curs2;
       #     CALL osae_sp_object_property_set(oHouse,'Occupied Rooms',vOutput,'SYSTEM','osae_sp_system_count_occupants');
     #    END CASE;
  #  END IF;
END
$$

--
-- Create procedure "osae_sp_system_count_room_occupants"
--
DROP PROCEDURE IF EXISTS osae_sp_system_count_room_occupants$$
CREATE PROCEDURE osae_sp_system_count_room_occupants()
BEGIN
  DECLARE oHouse char(255);
  DECLARE vHouseOccupantCount int;
  DECLARE vHouseOldCount int;
  DECLARE vHouseRoomCount int;
  DECLARE vHouseOldRoomCount int;
  DECLARE vTemp varchar(200);
  DECLARE vOutput,vOutput2 varchar(200);
  DECLARE bDone, bDone2 int;
  DECLARE var1 char(255);
  DECLARE var2 char(255);
  DECLARE oCount, oCount2 int;
  DECLARE sContainerName char(255);
  DECLARE iContainerOccupants int;
  DECLARE iContainerOldOccupants int;

  DECLARE cursPlaces CURSOR FOR SELECT room, occupant_count FROM osae_v_system_occupied_rooms;
  DECLARE cursOccpiedPlaces CURSOR FOR SELECT room, occupant_count FROM osae_v_system_occupied_rooms WHERE occupant_count > 0;
  DECLARE cursPeople CURSOR FOR SELECT object_name FROM osae_v_object WHERE object_type = 'PERSON' AND state_name='ON';
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET bDone = 1;

  # Handle The HOUSE level occupant count
  SET oHouse = (SELECT object_name FROM osae_v_object WHERE object_type = 'HOUSE' LIMIT 1);
  SET vHouseOldCount = (SELECT property_value FROM osae_v_object_property WHERE object_name = oHouse AND property_name = 'Occupant Count');
  SELECT SUM(occupant_count) INTO vHouseOccupantCount FROM osae_v_system_occupied_rooms;
  SET vHouseOldRoomCount = (SELECT IF(CHAR_LENGTH(property_value) > 0, property_value, 0) FROM osae_v_object_property WHERE object_name = oHouse AND property_name = 'Occupied Room Count');
  SELECT COUNT(room) INTO vHouseRoomCount FROM osae_v_system_occupied_rooms WHERE occupant_count > 0;
  IF vHouseOldCount != vHouseOccupantCount THEN
    CALL osae_sp_object_property_set(oHouse, 'Occupant Count', vHouseOccupantCount, 'SYSTEM', 'osae_sp_system_count_occupants');
    CASE vHouseOccupantCount
      WHEN 0 THEN
        SET vOutput = 'Nobody is here';
        CALL osae_sp_object_property_set(oHouse, 'Occupants', vOutput, 'SYSTEM', 'osae_sp_system_count_occupants');
        CALL osae_sp_method_queue_add(oHouse, 'OFF', '', '', 'SYSTEM', 'Auto-Occupancy Logic');
      WHEN 1 THEN
        SET vOutput = (SELECT COALESCE(object_name, 'Nobody') FROM osae_v_object WHERE object_type = 'PERSON' AND state_name = 'ON' LIMIT 1);
        SET vOutput = CONCAT(vOutput, ' is here');
        CALL osae_sp_object_property_set(oHouse, 'Occupants', vOutput, 'SYSTEM', 'osae_sp_system_count_occupants');
        CALL osae_sp_method_queue_add(oHouse, 'ON', '', '', 'SYSTEM', 'Auto-Occupancy Logic');
      ELSE
        OPEN cursPeople;
        SET oCount = 0;
        SET bDone = 0;
        SET vOutput = '';
        REPEAT
          FETCH cursPeople INTO var1;
          IF oCount < vHouseOccupantCount THEN
            IF oCount = 0 THEN
              SET vOutput = CONCAT(vOutput, CONCAT(' and ', var1, ' are here'));
            ELSEIF oCount = 1 THEN
              SET vOutput = CONCAT(var1, vOutput);
            ELSE
              SET vOutput = CONCAT(var1, ', ', vOutput);
            END IF;
            SET oCount = oCount + 1;
          END IF;
        UNTIL bDone END REPEAT;

        CLOSE cursPeople;
        CALL osae_sp_object_property_set(oHouse, 'Occupants', vOutput, 'SYSTEM', 'osae_sp_system_count_occupants');
        CALL osae_sp_method_queue_add(oHouse, 'ON', '', '', 'SYSTEM', 'Auto-Occupancy Logic');
    END CASE;
  END IF;

  IF vHouseOldRoomCount != vHouseRoomCount THEN
    CALL osae_sp_object_property_set(oHouse, 'Occupied Room Count', vHouseRoomCount, 'SYSTEM', 'osae_sp_system_count_occupants');
  END IF;

  CASE vHouseRoomCount
    WHEN 0 THEN
      SET vOutput = 'All rooms are vacant';
      CALL osae_sp_object_property_set(oHouse, 'Occupied Rooms', vOutput, 'SYSTEM', 'osae_sp_system_count_occupants');
    WHEN 1 THEN
      SET vOutput = (SELECT COALESCE(object_name, 'Unknown') FROM osae_v_object WHERE object_type = 'ROOM' AND state_name = 'ON' LIMIT 1);
      SET vOutput = CONCAT(vOutput, ' is occupied');
      CALL osae_sp_object_property_set(oHouse, 'Occupied Rooms', vOutput, 'SYSTEM', 'osae_sp_system_count_occupants');
    ELSE OPEN cursOccpiedPlaces;
      SET oCount = 0;
      SET bDone = 0;
      SET vOutput = '';
      REPEAT
        FETCH cursOccpiedPlaces INTO var1,var2;
        IF oCount < vHouseRoomCount THEN
          IF oCount = 0 THEN
            SET vOutput = CONCAT(vOutput, CONCAT(' and ', var1, ' are occupied'));
          ELSEIF oCount = 1 THEN
            SET vOutput = CONCAT(var1, vOutput);
          ELSE
            SET vOutput = CONCAT(var1, ', ', vOutput);
          END IF;
          SET oCount = oCount + 1;
        END IF;
      UNTIL bDone END REPEAT;
      CLOSE cursOccpiedPlaces;
      CALL osae_sp_object_property_set(oHouse, 'Occupied Rooms', vOutput, 'SYSTEM', 'osae_sp_system_count_occupants');
  END CASE;

  #Count the occupants in each Room and turn the objects on and off...
  OPEN cursPlaces;
  SET bDone = 0;
  REPEAT
    SET sContainerName = '';
    SET iContainerOccupants = 0;
    FETCH cursPlaces INTO sContainerName, iContainerOccupants;
    SET iContainerOldOccupants = (SELECT COALESCE(property_value, 0) FROM osae_v_object_property WHERE object_name = sContainerName AND property_name = 'Occupant Count' AND property_value != '');
    IF iContainerOccupants != iContainerOldOccupants THEN
      CALL osae_sp_debug_log_add(CONCAT('Counting Container Occupants Found a Change in ', sContainerName), 'SYSTEM');
      CALL osae_sp_object_property_set(sContainerName, 'Occupant Count', iContainerOccupants, '', '');
      IF iContainerOccupants = 0 THEN
        CALL osae_sp_method_queue_add(sContainerName, 'OFF', '', '', 'SYSTEM', 'Auto-Occupancy Logic');
        CALL osae_sp_object_property_set(sContainerName, 'Occupants', 'Nobody', 'SYSTEM', 'system_count_container_occupants');
      ELSE
        CALL osae_sp_method_queue_add(sContainerName, 'ON', '', '', 'SYSTEM', 'Auto-Occupancy Logic');
        IF iContainerOccupants = 1 THEN
          SET vOutput = (SELECT object_name FROM osae_v_object WHERE object_type = 'PERSON' AND container_name = sContainerName LIMIT 1);
          CALL osae_sp_object_property_set(sContainerName, 'Occupants', vOutput, 'SYSTEM', 'osae_sp_system_count_occupants');
        ELSE
          BLOCK2: BEGIN
            DECLARE cursRoomOccupants CURSOR FOR SELECT object_name FROM osae_v_object WHERE object_type = 'PERSON' AND container_name=sContainerName;
            DECLARE CONTINUE HANDLER FOR NOT FOUND SET bDone2 = 1;
            OPEN cursRoomOccupants;
            SET oCount2 = 0;
            SET bDone2 = 0;
            SET vOutput2 = '';
            REPEAT
              FETCH cursRoomOccupants INTO var2;
              IF oCount2 < iContainerOccupants THEN
                IF oCount2 = 0 THEN
                  SET vOutput2 = CONCAT(vOutput2, CONCAT(' and ', var2, ' are here'));
                ELSEIF oCount2 = 1 THEN
                  SET vOutput2 = CONCAT(var2, vOutput2);
                ELSE
                  SET vOutput2 = CONCAT(var2, ', ', vOutput2);
                END IF;
                SET oCount2 = oCount2 + 1;
              END IF;
            UNTIL bDone2 END REPEAT;
        CLOSE cursRoomOccupants;
END BLOCK2;
          CALL osae_sp_object_property_set(sContainerName, 'Occupants', vOutput2, 'SYSTEM', 'osae_sp_system_count_occupants');
        END IF;
      END IF;
    END IF;
  UNTIL bDone END REPEAT;
  CLOSE cursPlaces;
END
$$

--
-- Create procedure "osae_sp_system_process_methods"
--
DROP PROCEDURE IF EXISTS osae_sp_system_process_methods$$
CREATE PROCEDURE osae_sp_system_process_methods()
BEGIN
DECLARE vMethodQueueID INT;
DECLARE vSystemCount INT;
DECLARE vObjectName VARCHAR(200);
DECLARE vObjectType VARCHAR(200);
DECLARE vBaseType VARCHAR(200);
DECLARE vMethod VARCHAR(400);
DECLARE vParam1 VARCHAR(400);
DECLARE vParam2 VARCHAR(400);
DECLARE vStateCount INT;
DECLARE vPropertyCount INT;
DECLARE vSendMethod VARCHAR(40);
DECLARE vContainerID INT;

DECLARE done INT DEFAULT 0;  
DECLARE cur1 CURSOR FOR SELECT method_queue_id,object_name,object_type,method_name,parameter_1,parameter_2 FROM osae_v_method_queue WHERE object_owner='SYSTEM';
DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
    OPEN cur1; 
    Loop_Tag: LOOP
        FETCH cur1 INTO vMethodQueueID,vObjectName,vObjectType,vMethod,vParam1,vParam2;
        IF done THEN
            Leave Loop_Tag;
        END IF;
            CALL osae_sp_debug_log_add(CONCAT('SYSTEM handling ', vObjectName,' ',vMethod),'osae_sp_process_system_methods'); 
            DELETE FROM osae_method_queue WHERE method_queue_id = vMethodQueueID;
            #SELECT object_name,object_type,base_type INTO vObjectName,vObjectType,vBaseType FROM osae_v_object WHERE object_id=vObjectID;
            #SELECT method_name INTO vMethod FROM osae_object_type_method WHERE method_id=NEW.method_id;        
            # Here is the magic, if the Method Name matches a State, then the Method's Job is to Set that State, so look up the state
            IF UPPER(vMethod) = 'SEND MESSAGE' THEN
                SELECT UPPER(property_value) INTO vSendMethod FROM osae_v_object_property WHERE UPPER(object_name)=UPPER(vObjectName) AND UPPER(property_name)='COMMUNICATION METHOD'; 
                IF vSendMethod = 'SPEECH' THEN
                     CALL osae_sp_method_queue_add('SPEECH','SAY',vParam1,'','SYSTEM','process_system_methods');
                ELSEIF vSendMethod = 'JABBER' THEN
                     CALL osae_sp_method_queue_add('JABBER','SEND MESSAGE',vObjectName,vParam1,'SYSTEM','process_system_methods');
                END IF;
            ELSEIF UPPER(vMethod) = 'SET CONTAINER' THEN
                SELECT object_id INTO vContainerID FROM osae_object WHERE object_name=vParam1;
                UPDATE osae_object SET container_id = vContainerID WHERE object_name=vObjectName;
            ELSE
                SELECT count(state_name) INTO vStateCount FROM osae_v_object_type_state WHERE UPPER(state_name)=UPPER(vMethod) AND object_type=vObjectType; 
                IF vStateCount = 1 THEN   
                    CALL osae_sp_object_state_set (vObjectName,vMethod,'SYSTEM','osae_sp_process_system_methods');
                ELSE
                    SELECT count(property_name) INTO vPropertyCount FROM osae_v_object_type_property WHERE UPPER(property_name)=UPPER(vMethod) AND object_type=vObjectType; 
                    IF vPropertyCount = 1 THEN   
                        CALL osae_sp_object_property_set (vObjectName,vMethod,NEW.parameter_1,'SYSTEM','osae_sp_process_system_methods');
                    END IF;
                END IF;
            END IF;                   
        END LOOP;
    CLOSE cur1;   
END
$$

--
-- Create trigger "osae_tr_method_queue_before_delete"
--
DROP TRIGGER IF EXISTS osae_tr_method_queue_before_delete$$
CREATE TRIGGER osae_tr_method_queue_before_delete
	BEFORE DELETE
	ON osae_method_queue
	FOR EACH ROW
BEGIN
  INSERT INTO osae_method_log (entry_time,object_id,method_id,parameter_1,parameter_2,from_object_id,debug_trace) VALUES(OLD.entry_time,OLD.object_id,OLD.method_id,OLD.parameter_1,OLD.parameter_2,OLD.from_object_id,CONCAT(OLD.debug_trace,' -> osae_tr_method_queue_before_delete'));
END
$$

--
-- Create trigger "osae_tr_object_after_insert"
--
DROP TRIGGER IF EXISTS osae_tr_object_after_insert$$
CREATE TRIGGER osae_tr_object_after_insert
	AFTER INSERT
	ON osae_object
	FOR EACH ROW
BEGIN
DECLARE vPropertyID INT;
DECLARE vDefault VARCHAR(255);
DECLARE done INT DEFAULT 0;  
DECLARE cur1 CURSOR FOR SELECT property_id,property_default FROM osae_object_type_property WHERE object_type_id=NEW.`object_type_id`;
DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;
    OPEN cur1; 
    REPEAT
        FETCH cur1 INTO vPropertyID,vDefault;
        IF NOT done THEN 
            INSERT INTO osae_object_property (object_id,object_type_property_id,property_value) VALUES(NEW.`object_id`,vPropertyID,vDefault);
        END IF;
    UNTIL done END REPEAT;
    CLOSE cur1;
    INSERT INTO osae_object_state_history (object_id,state_id) SELECT NEW.`object_id`, state_id FROM osae_v_object_state WHERE object_id=NEW.object_id;        
END
$$

--
-- Create trigger "osae_tr_object_after_update"
--
DROP TRIGGER IF EXISTS osae_tr_object_after_update$$
CREATE TRIGGER osae_tr_object_after_update
	AFTER UPDATE
	ON osae_object
	FOR EACH ROW
BEGIN
  DECLARE vPersonID int;
  DECLARE vBaseType varchar(200);
  DECLARE vContainerType varchar(200);
  DECLARE vContainerName varchar(100);
  SELECT base_type, object_name INTO vContainerType, vContainerName FROM osae_v_object WHERE object_id = NEW.container_id;
  SELECT base_type INTO vBaseType FROM osae_v_object WHERE object_id = OLD.object_id;
  SET vPersonID = (SELECT object_type_id FROM osae_object_type WHERE object_type = 'PERSON');
  IF NEW.object_type_id = vPersonID AND OLD.container_id <> NEW.container_id AND vContainerType = 'PLACE' THEN
    CALL osae_sp_debug_log_add('Object After Update - Update Screen Position: ', 'SYSTEM');
    #CALL osae_sp_system_count_room_occupants;
    #Update the Screen Objects to reflect the container
    CALL osae_sp_screen_object_position(OLD.object_name, vContainerName);
  END IF;

  IF OLD.state_id <> NEW.state_id AND vBaseType = "SENSOR" THEN
    CALL osae_sp_system_who_tripped_sensor(NEW.object_name);
  END IF;

END
$$

--
-- Create trigger "osae_tr_object_before_insert"
--
DROP TRIGGER IF EXISTS osae_tr_object_before_insert$$
CREATE TRIGGER osae_tr_object_before_insert
	BEFORE INSERT
	ON osae_object
	FOR EACH ROW
BEGIN
DECLARE iState INT;
    IF ISNULL(NEW.state_id) THEN
        SELECT state_id INTO iState FROM osae_object_type_state WHERE object_type_id=NEW.object_type_id AND state_name="OFF";
        IF ISNULL(iState) THEN
            SELECT state_id INTO iState FROM osae_object_type_state WHERE object_type_id=NEW.object_type_id LIMIT 1;
         END IF;
        SET NEW.state_id=iState;
    END IF;
END
$$

--
-- Create trigger "osae_tr_object_before_update"
--
DROP TRIGGER IF EXISTS osae_tr_object_before_update$$
CREATE TRIGGER osae_tr_object_before_update
	BEFORE UPDATE
	ON osae_object
	FOR EACH ROW
BEGIN
DECLARE vState VARCHAR(50);
DECLARE vEventCount INT;
DECLARE vHideRedundantRvents INT;
DECLARE vEvent VARCHAR(200);
DECLARE vSystemID INT;
DECLARE vPlaceID INT;
DECLARE vContainer VARCHAR(200);
DECLARE vContainerType VARCHAR(200);
DECLARE vPlaceOnID INT;
DECLARE vPersonID INT;
DECLARE vContainedX INT;
DECLARE vContainedY INT;
    IF OLD.object_type_id <> NEW.object_type_id THEN
        DELETE FROM osae_object_property WHERE object_id=OLD.object_id;
        INSERT INTO osae_object_property (object_id,object_type_property_id,property_value) SELECT OLD.object_id, property_id, property_default FROM osae_object_type_property WHERE object_type_id=NEW.object_type_id;
        
        DELETE FROM osae_object_state_history WHERE object_id=OLD.object_id;
        INSERT INTO osae_object_state_history (object_id,state_id) SELECT OLD.object_id, state_id FROM osae_object_type_state WHERE object_type_id=NEW.object_type_id;        
        
        #DELETE FROM osae_object_property WHERE object_id=OLD.object_id;
        #INSERT INTO osae_object_property (object_id,object_type_property_id,property_value) SELECT OLD.object_id, property_id, property_default FROM osae_object_type_property WHERE object_type_id=NEW.object_type_id;
        DELETE FROM osae_object_event_script WHERE object_id=OLD.object_id;
    ELSE
        #Changing an Object's Type is so severe, we are only going to check containers and states if the object type is the same
        SET vContainerType = (SELECT base_type FROM osae_v_object WHERE object_id=NEW.container_id);
        SET vPersonID = (SELECT object_type_id FROM osae_object_type WHERE object_type='PERSON');
        IF OLD.object_type_id = vPersonID AND OLD.container_id <> NEW.container_id AND vContainerType='PLACE' THEN
            SET vContainer = (SELECT object_name FROM osae_v_object WHERE object_id=NEW.container_id);
            CALL osae_sp_method_queue_add (vContainer,'ON','','','SYSTEM','Auto-Occupancy Logic');
        END IF;
        IF OLD.state_id <> NEW.state_id THEN
            SET NEW.last_state_change=NOW();
            UPDATE osae_object_state_history SET times_this_hour=times_this_hour + 1, times_this_day=times_this_day + 1,times_this_month=times_this_month+1,times_this_year=times_this_year+1,times_ever=times_ever + 1 WHERE object_id=OLD.object_id AND state_id=NEW.state_id;
            INSERT INTO osae_object_state_change_history (object_id, state_id) VALUES (OLD.object_id, NEW.state_id);
        END IF;      
    END IF;

    IF OLD.object_name <> NEW.object_name THEN
      UPDATE osae_object_property SET property_value=NEW.object_name WHERE property_value=OLD.object_name;
    END IF; 

  
END
$$

--
-- Create trigger "osae_tr_object_property_after_update"
--
DROP TRIGGER IF EXISTS osae_tr_object_property_after_update$$
CREATE TRIGGER osae_tr_object_property_after_update
	AFTER UPDATE
	ON osae_object_property
	FOR EACH ROW
BEGIN
  DECLARE vTrack Boolean;
    SELECT track_history INTO vTrack FROM osae_v_object_type_property WHERE property_id=NEW.object_type_property_id;
    IF vTrack THEN
      INSERT INTO osae_object_property_history (object_property_id,property_value) VALUES(NEW.object_property_id,NEW.property_value);
    END IF;
END
$$

--
-- Create trigger "osae_tr_object_property_before_update"
--
DROP TRIGGER IF EXISTS osae_tr_object_property_before_update$$
CREATE TRIGGER osae_tr_object_property_before_update
	BEFORE UPDATE
	ON osae_object_property
	FOR EACH ROW
BEGIN
  IF OLD.property_value != NEW.property_value THEN
    SET NEW.Last_Updated=NOW();
  END IF;
END
$$

--
-- Create trigger "osae_tr_object_type_properties_after_insert"
--

DROP TRIGGER IF EXISTS osae_tr_object_type_properties_after_insert$$
CREATE TRIGGER osae_tr_object_type_properties_after_insert
	AFTER INSERT
	ON osae_object_type_property
	FOR EACH ROW
BEGIN
    INSERT INTO osae_object_property (object_id,object_type_property_id,property_value) SELECT object_id,NEW.property_id,NEW.property_default FROM osae_object WHERE object_type_id=NEW.object_type_id;
END
$$

--
-- Create trigger "tr_osae_event_log_after_insert"
--
DROP TRIGGER IF EXISTS tr_osae_event_log_after_insert$$
CREATE TRIGGER tr_osae_event_log_after_insert
	AFTER INSERT
	ON osae_event_log
	FOR EACH ROW
BEGIN
DECLARE vEventCount INT;
DECLARE vScriptID INT;
DECLARE vObjectTypeID INT;
DECLARE vObjectName VARCHAR(400); 
DECLARE vScriptSeq INT;
DECLARE vPrevScriptSeq INT;
DECLARE scriptProc VARCHAR(200);
DECLARE vDebugTrace VARCHAR(2000);
    SET vPrevScriptSeq = -1;
    SET vScriptSeq = 0;
    SET vDebugTrace = CONCAT(COALESCE(NEW.debug_trace,''),' -> tr_osae_event_log_after_insert');
    CALL osae_sp_debug_log_add(CONCAT('Event_Trigger is running for ',NEW.object_id,' ',NEW.event_id),vDebugTrace);
    SELECT object_name INTO vObjectName FROM osae_object WHERE object_id=NEW.object_id LIMIT 1;
    SELECT COUNT(event_script_id) INTO vEventCount FROM osae_v_object_event_script WHERE object_id=NEW.object_id AND event_id=NEW.event_id AND script IS NOT NULL and script<>'';
    IF vEventCount > 0 THEN
        WHILE vPrevScriptSeq != vScriptSeq DO
          SET vPrevScriptSeq = vScriptSeq; 
          SELECT script_sequence, s.script_id, sp.script_processor_plugin_name INTO vScriptSeq,vScriptID,scriptProc
            FROM osae_v_object_event_script e
            INNER JOIN osae_script s ON e.script_id = s.script_id
            INNER JOIN osae_script_processors sp ON sp.script_processor_id = s.script_processor_id
            WHERE object_id=NEW.object_id AND event_id=NEW.event_id AND s.script IS NOT NULL and s.script<>'' AND script_sequence > vScriptSeq
            ORDER BY script_sequence ASC LIMIT 1;
          IF vPrevScriptSeq != vScriptSeq THEN
            # CALL osae_sp_debug_log_add(CONCAT(vScriptSeq, '-',vScriptID,'-',scriptProc),vDebugTrace);
            CALL osae_sp_method_queue_add (scriptProc,'RUN SCRIPT',vScriptID,vObjectName,'SYSTEM',vDebugTrace);
          END IF;
        END WHILE;
    END IF; 
    SELECT object_type_id INTO vObjectTypeID FROM osae_v_object WHERE object_id=NEW.object_id;
    SELECT COUNT(object_type_event_script_id) INTO vEventCount FROM osae_v_object_type_event_script WHERE object_type_id=vObjectTypeID AND event_id=NEW.event_id AND script IS NOT NULL and script<>'';
    IF vEventCount > 0 THEN
        WHILE vPrevScriptSeq != vScriptSeq DO
          SET vPrevScriptSeq = vScriptSeq; 
          SELECT script_sequence, s.script_id, sp.script_processor_plugin_name INTO vScriptSeq,vScriptID,scriptProc 
            FROM osae_v_object_type_event_script e
            INNER JOIN osae_script s ON e.script_id = s.script_id
            INNER JOIN osae_script_processors sp ON sp.script_processor_id = s.script_processor_id
            WHERE object_type_id=vObjectTypeID AND event_id=NEW.event_id AND s.script IS NOT NULL and s.script<>'' AND script_sequence > vScriptSeq
            ORDER BY script_sequence ASC LIMIT 1;
          IF vPrevScriptSeq != vScriptSeq THEN
            # CALL osae_sp_debug_log_add(CONCAT(vScriptSeq, '-',vScriptID,'-',scriptProc),vDebugTrace);
            CALL osae_sp_method_queue_add (scriptProc,'RUN SCRIPT',vScriptID,vObjectName,'SYSTEM',vDebugTrace);
          END IF;
        END WHILE;
    END IF; 
END
$$

--
-- Create trigger "tr_recurring_after_insert"
--
DROP TRIGGER IF EXISTS tr_recurring_after_insert$$
CREATE TRIGGER tr_recurring_after_insert
	AFTER INSERT
	ON osae_schedule_recurring
	FOR EACH ROW
BEGIN
    CALL osae_sp_process_recurring;
END
$$

--
-- Create trigger "tr_recurring_after_update"
--
DROP TRIGGER IF EXISTS tr_recurring_after_update$$
CREATE TRIGGER tr_recurring_after_update
	AFTER UPDATE
	ON osae_schedule_recurring
	FOR EACH ROW
BEGIN
    CALL osae_sp_process_recurring;
END
$$

DELIMITER ;

--
-- Alter view "osae_v_object_type_state_list_full"
--
CREATE OR REPLACE 
VIEW osae_v_object_type_state_list_full
AS
	select `osae_v_object_type_state`.`base_type` AS `base_type`,`osae_v_object_type_state`.`object_type` AS `object_type`,`osae_v_object_type_state`.`state_label` AS `state_label` from `osae_v_object_type_state` where ((`osae_v_object_type_state`.`base_type` not in ('CONTROL','SCREEN','LIST')) and `osae_v_object_type_state`.`object_type` in (select distinct `osae_v_object`.`object_type` from `osae_v_object`));

--
-- Create view "osae_v_system_occupied_rooms"
--
CREATE OR REPLACE
VIEW osae_v_system_occupied_rooms
AS
SELECT
  `o1`.`object_name` AS `room`,
  COUNT(`o2`.`object_name`) AS `occupant_count`
FROM (`osae_v_object` `o1`
  LEFT JOIN `osae_v_object` `o2`
    ON (((`o1`.`object_id` = `o2`.`container_id`)
    AND (`o2`.`base_type` = 'PERSON'))))
WHERE (`o1`.`object_type` = 'ROOM')
GROUP BY `o1`.`object_name`;

DELIMITER $$

--
-- Alter event "osae_ev_off_timer"
--
ALTER EVENT osae_ev_off_timer
	DO 
BEGIN
  DECLARE vObjectName  VARCHAR(200);
  DECLARE iLoopCount   INT DEFAULT 0;
  DECLARE iMethodCount INT DEFAULT 0;
  DECLARE iStateCount  INT DEFAULT 0;
  DECLARE done         INT DEFAULT 0;
  DECLARE cur1 CURSOR FOR SELECT object_name FROM osae_v_object_property WHERE state_name <> 'OFF' AND property_name = 'OFF TIMER' AND property_value IS NOT NULL AND property_value <> '' AND subtime(now(), sec_to_time(property_value)) > object_last_updated;
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;
  DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
  CALL osae_sp_object_property_set('SYSTEM', 'Time', curtime(), 'SYSTEM', 'osae_ev_off_timer');
  CALL osae_sp_object_property_set('SYSTEM', 'Time AMPM', DATE_FORMAT(now(), '%h:%i %p'), 'SYSTEM', 'osae_ev_off_timer');
  CALL osae_sp_system_process_methods();
  CALL osae_sp_system_count_room_occupants();
  CALL osae_sp_system_count_plugins();
  #SELECT count(object_name) INTO iLoopCount FROM osae_v_object_property WHERE state_name <> 'OFF' AND property_name = 'OFF TIMER' AND property_value IS NOT NULL AND property_value <> '' AND subtime(now(), sec_to_time(property_value)) > object_last_updated;
  OPEN cur1;

Loop_Tag:
  LOOP
    FETCH cur1 INTO vObjectName;
    IF done THEN
      LEAVE Loop_Tag;
    END IF;
    SELECT count(method_id) INTO iMethodCount FROM osae_v_object_method WHERE upper(object_name) = upper(vObjectName) AND upper(method_name) = 'OFF';
    IF iMethodCount > 0 THEN
      CALL osae_sp_debug_log_add(concat('Turning ', vObjectName, ' Off'), 'osae_ev_off_timer');
      CALL osae_sp_method_queue_add(vObjectName, 'OFF', '', '', 'SYSTEM', 'osae_ev_off_timer');
    ELSE
      SELECT count(state_id) INTO iStateCount FROM osae_v_object_state WHERE upper(object_name) = upper(vObjectName) AND upper(state_name) = 'OFF';
      IF iStateCount > 0 THEN
        CALL osae_sp_debug_log_add(concat('Turning ', vObjectName, ' Off'), 'osae_ev_off_timer');
        CALL osae_sp_object_state_set(vObjectName, 'OFF', 'SYSTEM', 'osae_ev_off_timer');
      END IF;
    END IF;
  END LOOP;
  CLOSE cur1;

  SELECT count(method_id) INTO iMethodCount FROM osae_v_object_method;
END
$$

DELIMITER ;

--
-- Enable foreign keys
--
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;


CALL osae_sp_object_property_set('SYSTEM','DB Version','047','SYSTEM','');
CALL osae_sp_object_type_add ('USER CONTROL WEATHERCONTROL','Custom User Control','SYSTEM','USER CONTROL',0,1,0,1);

CALL osae_sp_object_type_property_add('USER CONTROL WEATHERCONTROL','Control Type','String','','',0);

CALL osae_sp_object_type_property_add('USER CONTROL WEATHERCONTROL','Object Name','String','','',0);

CALL osae_sp_object_type_property_add('USER CONTROL WEATHERCONTROL','X','Integer','100','',0);

CALL osae_sp_object_type_property_add('USER CONTROL WEATHERCONTROL','Y','Integer','100','',0);

CALL osae_sp_object_type_property_add('USER CONTROL WEATHERCONTROL','ZOrder','Integer','1','',0);



CALL osae_sp_object_type_add ('USER CONTROL MYSTATEBUTTON','Custom User Control','SYSTEM','USER CONTROL',0,1,0,1);

CALL osae_sp_object_type_property_add('USER CONTROL MYSTATEBUTTON','Control Type','String','','',0);

CALL osae_sp_object_type_property_add('USER CONTROL MYSTATEBUTTON','Object Name','String','','',0);

CALL osae_sp_object_type_property_add('USER CONTROL MYSTATEBUTTON','X','Integer','','',0);

CALL osae_sp_object_type_property_add('USER CONTROL MYSTATEBUTTON','Y','Integer','','',0);

CALL osae_sp_object_type_property_add('USER CONTROL MYSTATEBUTTON','ZOrder','Integer','','',0);

CALL osae_sp_object_delete ('WEATHER');
CALL osae_sp_object_type_delete ('WEATHER');

CALL osae_sp_object_type_add ('WEATHER','Weather Data','','CONTROL',0,1,0,1);
CALL osae_sp_object_type_state_add('WEATHER','ON','Current');
CALL osae_sp_object_type_state_add('WEATHER','OFF','Obsolete');
CALL osae_sp_object_type_event_add('WEATHER','ON','Updated');
CALL osae_sp_object_type_event_add('WEATHER','OFF','Hung');
CALL osae_sp_object_type_event_add('WEATHER','DAY','Day');
CALL osae_sp_object_type_event_add('WEATHER','NIGHT','Night');
CALL osae_sp_object_type_event_add('WEATHER','DAWN','Dawn');
CALL osae_sp_object_type_event_add('WEATHER','DUSK','Dusk');
CALL osae_sp_object_type_method_add('WEATHER','ON','Updated','','','','');
CALL osae_sp_object_type_method_add('WEATHER','OFF','Hung','','','','');
CALL osae_sp_object_type_property_add('WEATHER','Night1 Low','Integer','','',0);
CALL osae_sp_object_type_property_add('WEATHER','Night2 Low','Integer','','',0);
CALL osae_sp_object_type_property_add('WEATHER','Night3 Low','Integer','','',0);
CALL osae_sp_object_type_property_add('WEATHER','Night4 Low','Integer','','',0);
CALL osae_sp_object_type_property_add('WEATHER','Day1 High','Integer','','',0);
CALL osae_sp_object_type_property_add('WEATHER','Day2 High','Integer','','',0);
CALL osae_sp_object_type_property_add('WEATHER','Day3 High','Integer','','',0);
CALL osae_sp_object_type_property_add('WEATHER','Day4 High','Integer','','',0);
CALL osae_sp_object_type_property_add('WEATHER','Day1 Precip','Integer','','',0);
CALL osae_sp_object_type_property_add('WEATHER','Day2 Precip','Integer','','',0);
CALL osae_sp_object_type_property_add('WEATHER','Day3 Precip','Integer','','',0);
CALL osae_sp_object_type_property_add('WEATHER','Day4 Precip','Integer','','',0);
CALL osae_sp_object_type_property_add('WEATHER','Conditions','String','','',0);
CALL osae_sp_object_type_property_add('WEATHER','Wind Speed','Float','','',0);
CALL osae_sp_object_type_property_add('WEATHER','Wind Directions','String','','',0);
CALL osae_sp_object_type_property_add('WEATHER','Humidity','Integer','','',0);
CALL osae_sp_object_type_property_add('WEATHER','Pressure','Float','','',0);
CALL osae_sp_object_type_property_add('WEATHER','Dewpoint','Float','','',0);
CALL osae_sp_object_type_property_add('WEATHER','Image','String','','',0);
CALL osae_sp_object_type_property_add('WEATHER','Visibility','Float','','',0);
CALL osae_sp_object_type_property_add('WEATHER','Windchill','Integer','','',0);
CALL osae_sp_object_type_property_add('WEATHER','Temp','Float','','',0);
CALL osae_sp_object_type_property_add('WEATHER','Last Updated','DateTime','','',0);
CALL osae_sp_object_type_property_add('WEATHER','Day5 High','Integer','','',0);
CALL osae_sp_object_type_property_add('WEATHER','Day6 High','Integer','','',0);
CALL osae_sp_object_type_property_add('WEATHER','Night5 Low','Integer','','',0);
CALL osae_sp_object_type_property_add('WEATHER','Night6 Low','Integer','','',0);
CALL osae_sp_object_type_property_add('WEATHER','Day7 High','Integer','','',0);
CALL osae_sp_object_type_property_add('WEATHER','Day5 Precip','Integer','','',0);
CALL osae_sp_object_type_property_add('WEATHER','Day6 Precip','Integer','','',0);
CALL osae_sp_object_type_property_add('WEATHER','Day7 Precip','Integer','','',0);
CALL osae_sp_object_type_property_add('WEATHER','Night7 Low','Integer','','',0);
CALL osae_sp_object_type_property_add('WEATHER','Night1 Precip','Integer','','',0);
CALL osae_sp_object_type_property_add('WEATHER','Night2 Precip','Integer','','',0);
CALL osae_sp_object_type_property_add('WEATHER','Night3 Precip','Integer','','',0);
CALL osae_sp_object_type_property_add('WEATHER','Night4 Precip','Integer','','',0);
CALL osae_sp_object_type_property_add('WEATHER','Night5 Precip','Integer','','',0);
CALL osae_sp_object_type_property_add('WEATHER','Night6 Precip','Integer','','',0);
CALL osae_sp_object_type_property_add('WEATHER','Night7 Precip','Integer','','',0);
CALL osae_sp_object_type_property_add('WEATHER','Tonight Precip','Integer','','',0);
CALL osae_sp_object_type_property_add('WEATHER','Today Precip','Integer','','',0);
CALL osae_sp_object_type_property_add('WEATHER','Night1 Forecast','String','','',0);
CALL osae_sp_object_type_property_add('WEATHER','Night2 Forecast','String','','',0);
CALL osae_sp_object_type_property_add('WEATHER','Night3 Forecast','String','','',0);
CALL osae_sp_object_type_property_add('WEATHER','Night4 Forecast','String','','',0);
CALL osae_sp_object_type_property_add('WEATHER','Night5 Forecast','String','','',0);
CALL osae_sp_object_type_property_add('WEATHER','Night6 Forecast','String','','',0);
CALL osae_sp_object_type_property_add('WEATHER','Night7 Forecast','String','','',0);
CALL osae_sp_object_type_property_add('WEATHER','Tonight Forecast','String','','',0);
CALL osae_sp_object_type_property_add('WEATHER','Today Forecast','String','','',0);
CALL osae_sp_object_type_property_add('WEATHER','Day1 Forecast','String','','',0);
CALL osae_sp_object_type_property_add('WEATHER','Day2 Forecast','String','','',0);
CALL osae_sp_object_type_property_add('WEATHER','Day3 Forecast','String','','',0);
CALL osae_sp_object_type_property_add('WEATHER','Day4 Forecast','String','','',0);
CALL osae_sp_object_type_property_add('WEATHER','Day5 Forecast','String','','',0);
CALL osae_sp_object_type_property_add('WEATHER','Day6 Forecast','String','','',0);
CALL osae_sp_object_type_property_add('WEATHER','Day7 Forecast','String','','',0);
CALL osae_sp_object_type_property_add('WEATHER','Night1 Image','String','','',0);
CALL osae_sp_object_type_property_add('WEATHER','Night2 Image','String','','',0);
CALL osae_sp_object_type_property_add('WEATHER','Night3 Image','String','','',0);
CALL osae_sp_object_type_property_add('WEATHER','Night4 Image','String','','',0);
CALL osae_sp_object_type_property_add('WEATHER','Night5 Image','String','','',0);
CALL osae_sp_object_type_property_add('WEATHER','Night6 Image','String','','',0);
CALL osae_sp_object_type_property_add('WEATHER','Night7 Image','String','','',0);
CALL osae_sp_object_type_property_add('WEATHER','Tonight Image','String','','',0);
CALL osae_sp_object_type_property_add('WEATHER','Today Image','String','','',0);
CALL osae_sp_object_type_property_add('WEATHER','Day1 Image','String','','',0);
CALL osae_sp_object_type_property_add('WEATHER','Day2 Image','String','','',0);
CALL osae_sp_object_type_property_add('WEATHER','Day3 Image','String','','',0);
CALL osae_sp_object_type_property_add('WEATHER','Day4 Image','String','','',0);
CALL osae_sp_object_type_property_add('WEATHER','Day5 Image','String','','',0);
CALL osae_sp_object_type_property_add('WEATHER','Day6 Image','String','','',0);
CALL osae_sp_object_type_property_add('WEATHER','Day7 Image','String','','',0);
CALL osae_sp_object_type_property_add('WEATHER','Night1 Summary','String','','',0);
CALL osae_sp_object_type_property_add('WEATHER','Night2 Summary','String','','',0);
CALL osae_sp_object_type_property_add('WEATHER','Night3 Summary','String','','',0);
CALL osae_sp_object_type_property_add('WEATHER','Night4 Summary','String','','',0);
CALL osae_sp_object_type_property_add('WEATHER','Night5 Summary','String','','',0);
CALL osae_sp_object_type_property_add('WEATHER','Night6 Summary','String','','',0);
CALL osae_sp_object_type_property_add('WEATHER','Night7 Summary','String','','',0);
CALL osae_sp_object_type_property_add('WEATHER','Tonight Summary','String','','',0);
CALL osae_sp_object_type_property_add('WEATHER','Today Summary','String','','',0);
CALL osae_sp_object_type_property_add('WEATHER','Day1 Summary','String','','',0);
CALL osae_sp_object_type_property_add('WEATHER','Day2 Summary','String','','',0);
CALL osae_sp_object_type_property_add('WEATHER','Day3 Summary','String','','',0);
CALL osae_sp_object_type_property_add('WEATHER','Day4 Summary','String','','',0);
CALL osae_sp_object_type_property_add('WEATHER','Day5 Summary','String','','',0);
CALL osae_sp_object_type_property_add('WEATHER','Day6 Summary','String','','',0);
CALL osae_sp_object_type_property_add('WEATHER','Day7 Summary','String','','',0);
CALL osae_sp_object_type_property_add('WEATHER','Sunrise','DateTime','','',0);
CALL osae_sp_object_type_property_add('WEATHER','Sunset','DateTime','','',0);
CALL osae_sp_object_type_property_add('WEATHER','Tonight Low','Integer','','',0);
CALL osae_sp_object_type_property_add('WEATHER','Today High','Integer','','',0);
CALL osae_sp_object_type_property_add('WEATHER','Latitude','Float','','',0);
CALL osae_sp_object_type_property_add('WEATHER','Longitude','Float','','',0);
CALL osae_sp_object_type_property_add('WEATHER','DayNight','String','','',0);

CALL osae_sp_object_add ('Weather','','WEATHER','','SYSTEM',0,@results);

CALL osae_sp_object_type_add ('WUNDERGROUND','Weather Underground','','PLUGIN',1,0,0,1);
CALL osae_sp_object_type_state_add('WUNDERGROUND','ON','Running');
CALL osae_sp_object_type_state_add('WUNDERGROUND','OFF','Stopped');
CALL osae_sp_object_type_event_add('WUNDERGROUND','ON','Started');
CALL osae_sp_object_type_event_add('WUNDERGROUND','OFF','Stopped');
CALL osae_sp_object_type_method_add('WUNDERGROUND','ON','Start','','','','');
CALL osae_sp_object_type_method_add('WUNDERGROUND','OFF','Stop','','','','');
CALL osae_sp_object_type_method_add('WUNDERGROUND','UPDATE','Update','','','','');
CALL osae_sp_object_type_property_add('WUNDERGROUND','State','String','KS','',0);
CALL osae_sp_object_type_property_add('WUNDERGROUND','Forecast Interval','Integer','60','',0);
CALL osae_sp_object_type_property_add('WUNDERGROUND','Metric','Boolean','FALSE','',0);
CALL osae_sp_object_type_property_add('WUNDERGROUND','DuskPre','Integer','0','',0);
CALL osae_sp_object_type_property_add('WUNDERGROUND','DuskPost','Integer','0','',0);
CALL osae_sp_object_type_property_add('WUNDERGROUND','DawnPre','Integer','0','',0);
CALL osae_sp_object_type_property_add('WUNDERGROUND','DawnPost','Integer','0','',0);
CALL osae_sp_object_type_property_add('WUNDERGROUND','Key','String','','',0);
CALL osae_sp_object_type_property_add('WUNDERGROUND','City','String','Ellis','',0);
CALL osae_sp_object_type_property_add('WUNDERGROUND','Conditions Interval','Integer','5','',0);

