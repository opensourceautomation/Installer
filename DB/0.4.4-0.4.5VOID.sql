-- 
-- Script was generated by Devart dbForge Studio for MySQL, Version 6.3.341.0
-- Product Home Page: http://www.devart.com/dbforge/mysql/studio
-- Script date 5/1/2015 1:14:48 PM
-- Server version: 5.6.24
-- Run this script against osae_044 to synchronize it with osae
-- Please backup your target database before running this script
-- 

--
-- Disable foreign keys
--
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;

USE osae;


--
-- Alter table "osae_debug_log"
--
ALTER TABLE osae_debug_log
  CHANGE COLUMN log_time log_time TIMESTAMP(2) NOT NULL DEFAULT CURRENT_TIMESTAMP(2) ON UPDATE CURRENT_TIMESTAMP(2);

--
-- Alter table "osae_log"
--
ALTER TABLE osae_log
  ADD COLUMN log_time TIMESTAMP(2) NOT NULL DEFAULT CURRENT_TIMESTAMP(2) AFTER ID,
  CHANGE COLUMN Thread Thread VARCHAR(255) NOT NULL,
  CHANGE COLUMN Date Date DATETIME DEFAULT NULL AFTER Exception;

--
-- Alter table "osae_event_log"
--
ALTER TABLE osae_event_log
  CHANGE COLUMN log_time log_time TIMESTAMP(2) NOT NULL DEFAULT CURRENT_TIMESTAMP(2) ON UPDATE CURRENT_TIMESTAMP(2);

--
-- Alter table "osae_method_log"
--
ALTER TABLE osae_method_log
  CHANGE COLUMN entry_time entry_time TIMESTAMP(2) NOT NULL DEFAULT CURRENT_TIMESTAMP(2);

--
-- Alter table "osae_method_queue"
--
ALTER TABLE osae_method_queue
  CHANGE COLUMN entry_time entry_time TIMESTAMP(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6);

--
-- Alter table "osae_screen_object"
--
ALTER TABLE osae_screen_object
  CHANGE COLUMN screen_id screen_id INT(10) UNSIGNED ZEROFILL NOT NULL,
  CHANGE COLUMN control_id control_id INT(10) UNSIGNED ZEROFILL NOT NULL;

ALTER TABLE osae_screen_object
  ADD UNIQUE INDEX UK_osae_screen_object (screen_id, control_id);

ALTER TABLE osae_screen_object
  DROP FOREIGN KEY osae_fk_screen_screen_to_object;
ALTER TABLE osae_screen_object
  ADD CONSTRAINT osae_fk_screen_screen_to_object FOREIGN KEY (screen_id)
    REFERENCES osae_object(object_id) ON DELETE CASCADE ON UPDATE CASCADE;

DELIMITER $$

--
-- Alter procedure "osae_sp_screen_object_add"
--
DROP PROCEDURE osae_sp_screen_object_add$$
CREATE PROCEDURE osae_sp_screen_object_add(
  IN  pscreenname   varchar(200),
  IN  pobjectname   varchar(200),
  IN  pcontrolname  varchar(200)
)
BEGIN
DECLARE vScreenID INT;
DECLARE vObjectID INT;
DECLARE vControlID INT;
    SELECT osae_fn_lookup_object_id(pscreenname) INTO vScreenID;
    SELECT osae_fn_lookup_object_id(pobjectname) INTO vObjectID;    
    SELECT osae_fn_lookup_object_id(pcontrolname) INTO vControlID;
    # TODO - Add Duplicate Check, working on Constraint now
    INSERT INTO osae_screen_object (screen_id,object_id,control_id) VALUES(vScreenID,vObjectID,vControlID);    
END
$$

--
-- Create procedure "osae_sp_screen_object_delete"
--
CREATE PROCEDURE osae_sp_screen_object_delete(
  IN  pscreenname   varchar(200),
  IN  pobjectname   varchar(200),
  IN  pcontrolname  varchar(200)
)
BEGIN
DECLARE vScreenID INT;
DECLARE vObjectID INT;
DECLARE vControlID INT;
    SELECT osae_fn_lookup_object_id(pscreenname) INTO vScreenID;
    SELECT osae_fn_lookup_object_id(pobjectname) INTO vObjectID;    
    SELECT osae_fn_lookup_object_id(pcontrolname) INTO vControlID;
    DELETE FROM osae_screen_object WHERE screen_id=vScreenID AND object_id=vObjectID AND control_id=vControlID;    
END
$$

--
-- Create procedure "osae_sp_screen_object_update"
--
CREATE PROCEDURE osae_sp_screen_object_update(
  IN  pscreenname   varchar(200),
  IN  pobjectname   varchar(200),
  IN  pcontrolname  varchar(200)
)
BEGIN
DECLARE vScreenID INT;
DECLARE vObjectID INT;
DECLARE vControlID INT;
    SELECT osae_fn_lookup_object_id(pscreenname) INTO vScreenID;
    SELECT osae_fn_lookup_object_id(pobjectname) INTO vObjectID;    
    SELECT osae_fn_lookup_object_id(pcontrolname) INTO vControlID;
    UPDATE osae_screen_object SET object_id=vObjectID WHERE screen_id=vScreenID AND control_id=vControlID;    
END
$$

--
-- Alter procedure "osae_sp_server_log_get"
--
DROP PROCEDURE osae_sp_server_log_get$$
CREATE PROCEDURE osae_sp_server_log_get(IN pinfo bit,
IN pdebug bit,
IN perror bit,
IN psource varchar(50))
BEGIN
 SELECT
   ID,`log_time`,`Thread`,`Level`,`Logger`,`Message`,`Exception`
 FROM osae_log
 WHERE ((Level = 'INFO' AND pinfo = 1)
 OR (Level = 'DEBUG' AND pdebug = 1)
 OR (Level = 'ERROR' AND perror = 1))
 AND (Logger = psource OR psource = 'ALL')

 ORDER BY osae_log.log_time DESC, ID DESC
 LIMIT 500;
END
$$

--
-- Alter procedure "osae_sp_system_count_occupants"
--
DROP PROCEDURE osae_sp_system_count_occupants$$
CREATE PROCEDURE osae_sp_system_count_occupants()
BEGIN
DECLARE vOccupantCount INT;
DECLARE vOldCount INT;
DECLARE vTemp VARCHAR(200);
DECLARE vOutput VARCHAR(200);
DECLARE bDone INT;
DECLARE var1 CHAR(40);
DECLARE var2 CHAR(40);
DECLARE oCount INT;
DECLARE sContainerName CHAR(255);
DECLARE iContainerOccupants INT;
DECLARE iContainerOldOccupants INT;

DECLARE curs CURSOR FOR SELECT object_name FROM osae_v_object WHERE object_type='PERSON' AND state_name='ON';
DECLARE curs2 Cursor FOR SELECT object_name FROM osae_v_object WHERE object_type='PLACE' AND state_name='ON';
DECLARE curs3 Cursor FOR SELECT o1.object_name,COUNT(o2.object_name)FROM osae_v_object o1 LEFT OUTER JOIN osae_v_object o2 ON o1.object_id = o2.container_id AND o2.base_type = "PERSON" WHERE o1.object_type = 'PLACE' GROUP BY o1.object_name;
DECLARE CONTINUE HANDLER FOR NOT FOUND SET bDone = 1;
  SET vOldCount = (SELECT property_value FROM osae_v_object_property WHERE object_name='SYSTEM' AND property_name='Occupants');
    SELECT COUNT(object_id) INTO vOccupantCount FROM osae_v_object WHERE object_type='PERSON' AND state_name='ON';
    IF vOldCount != vOccupantCount THEN
        CALL osae_sp_object_property_set('SYSTEM','Occupants',vOccupantCount,'SYSTEM','osae_sp_system_count_occupants');
        CASE vOccupantCount
          WHEN 0 THEN 
            SET vOutput = 'Nobody is here';
            CALL osae_sp_object_property_set('SYSTEM','Occupant String',vOutput,'SYSTEM','osae_sp_system_count_occupants');            
          WHEN 1 THEN 
            SET vOutput = (SELECT COALESCE(object_name,'Nobody') FROM osae_v_object WHERE object_type='PERSON' AND state_name='ON' LIMIT 1);
            SET vOutput = CONCAT(vOutput,' is here');
            CALL osae_sp_object_property_set('SYSTEM','Occupant String',vOutput,'SYSTEM','osae_sp_system_count_occupants');
          ELSE
            
            OPEN curs;
            SET oCount = 0;
            SET bDone = 0;
            SET vOutput = '';
            REPEAT
              FETCH curs INTO var1;
              IF oCount < vOccupantCount THEN
                IF oCount = 0 THEN
                  SET vOutput = CONCAT(vOutput,CONCAT(' and ', var1, ' are here'));
                ELSEIF oCount = 1 THEN
                  SET vOutput = CONCAT(var1, vOutput);
                ELSE
                  SET vOutput = CONCAT(var1, ', ', vOutput);
                END IF;
                SET oCount = oCount + 1;
              END IF;
            UNTIL bDone END REPEAT;
          
            CLOSE curs;
            CALL osae_sp_object_property_set('SYSTEM','Occupant String',vOutput,'SYSTEM','osae_sp_system_count_occupants');
         END CASE;
    END IF;
    SET vOldCount = 0;
    SET vOldCount = (SELECT COALESCE(property_value,0) FROM osae_v_object_property WHERE object_name='SYSTEM' AND property_name='Occupied Locations');
    SELECT COUNT(object_id) INTO vOccupantCount FROM osae_v_object WHERE object_type='PLACE' AND state_name='ON';
    #CALL osae_sp_debug_log_add(CONCAT('Counted Places: ',vOccupantCount, ' Old count = ',vOldCount),'SYSTEM');
    IF vOldCount != vOccupantCount THEN
        CALL osae_sp_object_property_set('SYSTEM','Occupied Locations',vOccupantCount,'SYSTEM','osae_sp_system_count_occupants');
        CASE vOccupantCount
          WHEN 0 THEN 
            SET vOutput = 'All Locations are Vacant';
            CALL osae_sp_object_property_set('SYSTEM','Occupied Location String',vOutput,'SYSTEM','osae_sp_system_count_occupants');            
          WHEN 1 THEN 
            SET vOutput = (SELECT object_name FROM osae_v_object WHERE object_type='PLACE' AND state_name='ON' LIMIT 1);
            SET vOutput = CONCAT('The ',vOutput,' is occupied');
            CALL osae_sp_object_property_set('SYSTEM','Occupied Location String',vOutput,'SYSTEM','osae_sp_system_count_occupants');
          ELSE
            OPEN curs2;
            SET oCount = 0;
            SET bDone = 0;
            SET vOutput = '';
            REPEAT
              FETCH curs2 INTO var2;
              IF oCount < vOccupantCount THEN
                IF oCount = 0 THEN
                  SET vOutput = CONCAT(vOutput,CONCAT(' and the ', var2, ' are occupied'));
                ELSEIF oCount = 1 THEN
                  SET vOutput = CONCAT('the ', var2, vOutput);
                ELSE
                  SET vOutput = CONCAT('the ', var2, ', ', vOutput);
                END IF;
                SET oCount = oCount + 1;
              END IF;
            UNTIL bDone END REPEAT;
          
            CLOSE curs2;
            CALL osae_sp_object_property_set('SYSTEM','Occupied Location String',vOutput,'SYSTEM','osae_sp_system_count_occupants');
         END CASE;
    END IF;
    
    #Count the occupants in each container and turn the objects on and off...
    OPEN curs3;
      SET sContainerName = '';
      SET iContainerOccupants = 0;
      SET bDone = 0;
      REPEAT
        FETCH curs3 INTO sContainerName,iContainerOccupants;
        SET iContainerOldOccupants = (SELECT COALESCE(property_value,0) FROM osae_v_object_property WHERE object_name=sContainerName AND property_name='Occupants');
        IF iContainerOccupants != iContainerOldOccupants THEN
          CALL osae_sp_object_property_set(sContainerName,'Occupants',iContainerOccupants,'','');
          IF iContainerOccupants = 0 THEN
            CALL osae_sp_object_state_set(sContainerName,'OFF','SYSTEM','');
          ELSE
            CALL osae_sp_object_state_set(sContainerName,'ON','SYSTEM','');
          END IF;
        END IF;
      UNTIL bDone END REPEAT;
    CLOSE curs3;
END
$$

DELIMITER ;

--
-- Enable foreign keys
--
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;


-- Set DB version 
CALL osae_sp_object_property_set('SYSTEM', 'DB Version', '0.4.5', '', '');