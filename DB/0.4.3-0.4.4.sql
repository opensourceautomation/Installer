-- Script was generated by Devart dbForge Studio for MySQL, Version 6.1.166.0
-- Product Home Page: http://www.devart.com/dbforge/mysql/studio
-- Script date 8/10/2014 9:53:31 PM
-- Server version: 5.5.37
-- Run this script against osa043 to synchronize it with osae
-- Please backup your target database before running this script

--
-- Disable foreign keys
--
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
USE osae;

--
-- Create table "osae_log"
--
CREATE TABLE IF NOT EXISTS osae_log (
  ID INT(11) NOT NULL AUTO_INCREMENT,
  Date DATETIME NOT NULL,
  Thread VARCHAR(255) NOT NULL,
  Level VARCHAR(255) NOT NULL,
  Logger VARCHAR(255) NOT NULL,
  Message VARCHAR(4000) NOT NULL,
  Exception VARCHAR(4000) DEFAULT NULL,
  PRIMARY KEY (ID)
)
ENGINE = INNODB
CHARACTER SET latin1
COLLATE latin1_swedish_ci;

--
-- Alter table "osae_event_log"
--
ALTER TABLE osae_event_log
  DROP INDEX IDX_osae_event_log_log_time;

DELIMITER $$

--
-- Alter procedure "osae_sp_method_queue_add"
--
DROP PROCEDURE IF EXISTS osae_sp_method_queue_add$$
CREATE PROCEDURE osae_sp_method_queue_add(IN pobject varchar(200), IN pmethod varchar(200), IN pparameter1 varchar(1024), IN pparameter2 varchar(1024), IN pfromobject varchar(200), IN pdebuginfo varchar(1000))
BEGIN
DECLARE vObjectCount INT;
DECLARE vObjectID INT;
DECLARE vObjectTypeID INT;
DECLARE vMethodCount INT;
DECLARE vMethodID INT;
DECLARE vFromObjectID INT DEFAULT NULL;
DECLARE vFromObjectCount INT;

DECLARE vDebugTrace VARCHAR(1000);

DECLARE vMethod VARCHAR(200);
SET max_sp_recursion_depth = 10;
SET vDebugTrace = CONCAT(pdebuginfo,' -> osae_sp_method_queue_add');
    SELECT object_id INTO vFromObjectID FROM osae_object WHERE UPPER(object_name)=UPPER(pfromobject);
    SELECT COUNT(object_id) INTO vObjectCount FROM osae_object WHERE UPPER(object_name)=UPPER(pobject);
    IF vObjectCount = 1 THEN
        SELECT object_id,object_type_id INTO vObjectID,vObjectTypeID FROM osae_object WHERE UPPER(object_name)=UPPER(pobject);
        SELECT COUNT(method_id) INTO vMethodCount FROM osae_object_type_method WHERE object_type_id=vObjectTypeID AND (UPPER(method_name)=UPPER(pmethod) OR UPPER(method_label)=UPPER(pmethod));
        IF vMethodCount > 0 THEN       
            SELECT method_id INTO vMethodID FROM osae_object_type_method WHERE object_type_id=vObjectTypeID AND (UPPER(method_name)=UPPER(pmethod) OR UPPER(method_label)=UPPER(pmethod));
            # Check to see if an app owns this, or SYSTEM, if system owns we will have to handle events....
            #SELECT count(object_id) INTO vSystemCount FROM osae_v_object WHERE object_id=vObjectID AND owned_by='SYSTEM';
            #IF vSystemCount = 1 THEN
           #     SELECT object_name,object_type,base_type INTO vObjectName,vObjectType,vBaseType FROM osae_v_object WHERE object_id=vObjectID;
           #     SELECT method_name INTO vMethod FROM osae_object_type_method WHERE method_id=vMethodID;        
                # Here is the magic, if the Method Name matches a State, then the Method's Job is to Set that State, so look up the state
           #     SELECT count(state_name) INTO vStateCount FROM osae_v_object_type_state WHERE UPPER(state_name)=UPPER(vMethod) AND object_type=vObjectType; 
           #     IF vStateCount = 1 THEN   
          #          CALL osae_sp_object_state_set (vObjectName,vMethod,pfromobject,vDebugTrace);
           #     ELSE
            #      SELECT count(property_name) INTO vPropertyCount FROM osae_v_object_type_property WHERE UPPER(property_name)=UPPER(vMethod) AND object_type=vObjectType; 
            #      IF vPropertyCount = 1 THEN   
           #           CALL osae_sp_object_property_set (vObjectName,vMethod,pparameter1,pfromobject,vDebugTrace);
           #       END IF;
           #     END IF;                
         #   ELSE
                INSERT INTO osae_method_queue (object_id,method_id,parameter_1,parameter_2,from_object_id,debug_trace) VALUES(vObjectID,vMethodID,pparameter1,pparameter2,vFromObjectID,vDebugTrace);
          #  END IF;       
        END IF;
    END IF; 
END
$$

--
-- Alter procedure "osae_sp_object_add"
--
DROP PROCEDURE IF EXISTS osae_sp_object_add$$
CREATE PROCEDURE osae_sp_object_add(IN pname VARCHAR(200), IN pdescription VARCHAR(200), IN pobjecttype VARCHAR(200), IN paddress VARCHAR(200), IN pcontainer VARCHAR(200), IN penabled TINYINT(1), OUT results INTEGER)
BEGIN
  DECLARE vObjectCount     INT;
  DECLARE vObjectTypeCount INT;
  DECLARE iContainer       INT;
  DECLARE iObjectID        INT;
  DECLARE vObjectTypeID    INT;
  DECLARE vContainerCount  INT;
  DECLARE vContainerID     INT DEFAULT NULL;
  SET results = 1;

  SELECT count(object_type_id) INTO vObjectTypeCount FROM osae_object_type WHERE object_type = pobjecttype;
  IF vObjectTypeCount > 0 THEN
    SELECT object_type_id, container INTO vObjectTypeID, iContainer FROM osae_object_type WHERE  object_type = pobjecttype;
    SELECT count(object_id) INTO vContainerCount FROM osae_v_object WHERE object_name = pcontainer AND container = 1;
    IF vContainerCount = 1 THEN
      SELECT object_id INTO vContainerID FROM osae_v_object WHERE object_name = pcontainer AND container = 1;
    END IF;
    SELECT count(object_id) INTO vObjectCount FROM osae_object WHERE upper(object_name) = upper(pname) OR (upper(address) = upper(paddress) AND address IS NOT NULL AND address <> '');
    IF vObjectCount = 0 THEN
      INSERT INTO osae_object (object_name, object_description, object_type_id, address, container_id, enabled) VALUES (pname, pdescription, vObjectTypeID, paddress, vContainerID, penabled);
    ELSE
      CALL osae_sp_debug_log_add(concat('Object_Add Failed to Add ', pname, ' due to duplicate data.'), 'SYSTEM');
      SET results = 3;
    END IF;                                                                                 
    IF iContainer = 1 AND vContainerCount = 0 THEN
      SELECT object_id INTO iObjectID FROM osae_object WHERE object_name = pname;
      UPDATE osae_object SET  container_id = iObjectID WHERE object_id = iObjectID;
    END IF;
  ELSE
    SET results = 2;
  END IF;
END
$$

--
-- Create procedure "osae_sp_object_export"
--
DROP PROCEDURE IF EXISTS osae_sp_object_export$$
CREATE PROCEDURE osae_sp_object_export(IN objectName VARCHAR(255))
BEGIN
  DECLARE vObjectName VARCHAR(255);
  DECLARE vDescription VARCHAR(200);
  DECLARE vObjectType VARCHAR(200);
  DECLARE vAddress VARCHAR(200);
  DECLARE vContainer VARCHAR(200);
  DECLARE vEnabled INT;
  DECLARE vProcResults INT;

  DECLARE vPropertyName VARCHAR(200);
  DECLARE vPropertyValue VARCHAR(2000);

  DECLARE vResults TEXT;
  DECLARE v_finished BOOL; 

  DECLARE property_cursor CURSOR FOR SELECT property_name,COALESCE(property_value,'') AS property_value FROM osae_v_object_property WHERE object_name=objectName;

  DECLARE CONTINUE HANDLER FOR NOT FOUND SET v_finished = TRUE;

  #SET vObjectType = CONCAT(objectName,'2');
  SELECT object_name,object_description,object_type,COALESCE(address,''),COALESCE(container_name,''),enabled INTO vObjectName,vDescription,vObjectType,vAddress,vContainer,vEnabled FROM osae_v_object WHERE object_name = objectName;
  SET vResults = CONCAT('CALL osae_sp_object_add (\'', vObjectName,'\',\'',vDescription,'\',\'',vObjectType,'\',\'',vAddress,'\',\'',vContainer,'\',',vEnabled,',@results);','\r\n');

  OPEN property_cursor;
  get_properties: LOOP
    SET v_finished = FALSE;
    FETCH property_cursor INTO vPropertyName,vPropertyValue;
    IF v_finished THEN 
      LEAVE get_properties;
    END IF;
    SET vResults = CONCAT(vResults,'CALL osae_sp_object_property_set(\'',vObjectName,'\',\'',vPropertyName,'\',\'',vPropertyValue,'\',\'SYSTEM\',\'Import\');','\r\n');
  END LOOP get_properties;
  CLOSE property_cursor;

 SELECT vResults; 
END
$$

--
-- Alter procedure "osae_sp_object_property_set"
--
DROP PROCEDURE IF EXISTS osae_sp_object_property_set$$
CREATE PROCEDURE osae_sp_object_property_set(IN pname varchar(200), IN pproperty varchar(200), IN pvalue varchar(4000), IN pfromobject varchar(200), IN pdebuginfo varchar(2000))
BEGIN
DECLARE vObjectID INT DEFAULT 0;
DECLARE vObjectCount INT DEFAULT 0;
DECLARE vObjectTypeID INT DEFAULT 0;
DECLARE vPropertyID INT DEFAULT 0;
DECLARE vPropertyValue VARCHAR(4000);
DECLARE vPropertyCount INT DEFAULT 0;
DECLARE vEventCount INT;
DECLARE vDebugTrace VARCHAR(2000) DEFAULT '';
    SET vDebugTrace = CONCAT(pdebuginfo,' -> osae_sp_object_property_set');
    SELECT COUNT(object_id) INTO vObjectCount FROM osae_object WHERE UPPER(object_name)=UPPER(pname); 
    IF vObjectCount > 0 THEN  
        SELECT object_id,object_type_id INTO vObjectID,vObjectTypeID FROM osae_object WHERE UPPER(object_name)=UPPER(pname);
        SELECT COUNT(property_id) INTO vPropertyCount FROM osae_v_object_property WHERE UPPER(object_name)=UPPER(pname) AND UPPER(property_name)=UPPER(pproperty) AND (property_value IS NULL OR property_value != pvalue);        
        IF vPropertyCount > 0 THEN
            SELECT property_id,COALESCE(property_value,'') INTO vPropertyID, vPropertyValue FROM osae_v_object_property WHERE UPPER(object_name)=UPPER(pname) AND UPPER(property_name)=UPPER(pproperty) AND (property_value IS NULL OR property_value != pvalue);
            UPDATE osae_object_property SET property_value=pvalue WHERE object_id=vObjectID AND object_type_property_id=vPropertyID;
            UPDATE osae_object SET last_updated=NOW() WHERE object_id=vObjectID;            
            SELECT COUNT(event_id) INTO vEventCount FROM osae_object_type_event WHERE object_type_id=vObjectTypeID AND UPPER(event_name)=UPPER(pproperty);
            IF vEventCount > 0 THEN  
                CALL osae_sp_event_log_add(pname,pproperty,pfromobject,vDebugTrace,pvalue,NULL);
            END IF;
        END IF;
    END IF; 
END
$$

--
-- Create procedure "osae_sp_object_type_export"
--
DROP PROCEDURE IF EXISTS osae_sp_object_type_export$$
CREATE PROCEDURE osae_sp_object_type_export(IN objectName VARCHAR(255))
BEGIN
  DECLARE vResults TEXT;
  DECLARE vDescription VARCHAR(200);
  DECLARE vOwner VARCHAR(200);
  DECLARE vObjectType VARCHAR(200);
  DECLARE vBaseType VARCHAR(200);
  DECLARE vTypeOwner INT;
  DECLARE vSystemType INT;
  DECLARE vContainer INT;
  DECLARE vHideRedundant INT;
  DECLARE v_finished INT; 
  DECLARE vName VARCHAR(200);
  DECLARE vLabel VARCHAR(200);
  DECLARE vParam1Name VARCHAR(200);
  DECLARE vParam1Default VARCHAR(200);
  DECLARE vParam2Name VARCHAR(200);
  DECLARE vParam2Default VARCHAR(200);
  DECLARE vDataType VARCHAR(200);
  DECLARE vDefault VARCHAR(200);
  DECLARE vTrackHistory VARCHAR(200);

  DECLARE state_cursor CURSOR FOR SELECT state_name,state_label FROM osae_v_object_type_state WHERE object_type=objectName;
  DECLARE event_cursor CURSOR FOR SELECT event_name,event_label FROM osae_v_object_type_event WHERE object_type=objectName;
  DECLARE method_cursor CURSOR FOR SELECT method_name,method_label,param_1_label,param_1_default,param_2_label,param_2_default FROM osae_v_object_type_method WHERE object_type=objectName;
  DECLARE property_cursor CURSOR FOR SELECT property_name,property_datatype,property_default,track_history FROM osae_v_object_type_property WHERE object_type=objectName;
  DECLARE property_Option_cursor CURSOR FOR SELECT property_name,property_datatype,property_default,track_history FROM osae_v_object_type_property_option WHERE object_type=objectName;

  DECLARE CONTINUE HANDLER FOR NOT FOUND SET v_finished = TRUE;

  #SET vObjectType = CONCAT(objectName,'2');
  SET vObjectType = objectName;
  SELECT object_type_description,COALESCE(object_name,''),base_type,object_type_owner,system_hidden,container,hide_redundant_events INTO vDescription,vOwner,vBaseType,vTypeOwner,vSystemType,vContainer,vHideRedundant FROM osae_v_object_type WHERE object_type = objectName;
  SET vResults = CONCAT('CALL osae_sp_object_type_add (\'', vObjectType,'\',\'',vDescription,'\',\'',vOwner,'\',\'',vBaseType,'\',',vTypeOwner,',', vSystemType,',',vContainer,',',vHideRedundant,');','\r\n');

  OPEN state_cursor;
    get_states: LOOP
    SET v_finished = FALSE;
      FETCH state_cursor INTO vName,vLabel;
      IF v_finished THEN 
        LEAVE get_states;
      END IF;
      SET vResults = CONCAT(vResults,'CALL osae_sp_object_type_state_add(\'',vName,'\',\'',vLabel,'\',\'',vObjectType,'\');','\r\n');
    END LOOP get_states;
  CLOSE state_cursor;


  OPEN event_cursor;
  get_events: LOOP
    SET v_finished = FALSE;
    FETCH event_cursor INTO vName,vLabel;
    IF v_finished THEN 
      LEAVE get_events;
    END IF;
    SET vResults = CONCAT(vResults,'CALL osae_sp_object_type_event_add(\'',vName,'\',\'',vLabel,'\',\'',vObjectType,'\');','\r\n');
  END LOOP get_events;
  CLOSE event_cursor;

  OPEN method_cursor;
  get_methods: LOOP
    SET v_finished = FALSE;
    FETCH method_cursor INTO vName,vLabel,vParam1Name,vParam1Default,vParam2Name,vParam2Default;
    IF v_finished THEN 
      LEAVE get_methods;
    END IF;
    SET vResults = CONCAT(vResults,'CALL osae_sp_object_type_method_add(\'',vName,'\',\'',vLabel,'\',\'',vObjectType,'\',\'',vParam1Name,'\',\'',vParam2Name,'\',\'',vParam1Default,'\',\'',vParam2Default,'\');','\r\n');
  END LOOP get_methods;
  CLOSE method_cursor;
  SET v_finished = 0;

  OPEN property_cursor;
  get_properties: LOOP
    SET v_finished = FALSE;
    FETCH property_cursor INTO vName,vDataType,vDefault,vTrackHistory;
    IF v_finished THEN 
      LEAVE get_properties;
    END IF;
    SET vResults = CONCAT(vResults,'CALL osae_sp_object_type_property_add(\'',vName,'\',\'',vDataType,'\',\'',vDefault,'\',\'',vObjectType,'\',',vTrackHistory,');','\r\n');
  END LOOP get_properties;
  CLOSE property_cursor;

  SELECT vResults;
END
$$

--
-- Alter procedure "osae_sp_object_type_update"
--
DROP PROCEDURE IF EXISTS osae_sp_object_type_update$$
CREATE PROCEDURE osae_sp_object_type_update(
  IN  poldname              varchar(200),
  IN  pnewname              varchar(200),
  IN  pdesc                 varchar(200),
  IN  pownedby              varchar(200),
  IN  pbasetype             varchar(200),
  IN  ptypeowner            tinyint,
  IN  psystem               tinyint,
  IN  pcontainer            tinyint,
  IN  phideredundantevents  tinyint
)
BEGIN
DECLARE vOwnerTypeCount INT;
DECLARE vOwnerTypeID INT Default NULL;
DECLARE vBaseTypeCount INT;
DECLARE vBaseTypeID INT Default NULL;
    SELECT COUNT(object_name) INTO vOwnerTypeCount FROM osae_v_object WHERE UPPER(object_name)=UPPER(pownedby);
    IF vOwnerTypeCount = 1 THEN
        SELECT object_id INTO vOwnerTypeID FROM osae_v_object WHERE  UPPER(object_name)=UPPER(pownedby);
    END IF; 
    SELECT COUNT(object_type) INTO vBaseTypeCount FROM osae_v_object_type WHERE object_type=pbasetype;
    IF vBaseTypeCount = 1 THEN
        SELECT object_type_id INTO vBaseTypeID FROM osae_v_object_type WHERE object_type=pbasetype;
    END IF;     
    UPDATE osae_object_type SET object_type=UPPER(pnewname),object_type_description=pdesc,plugin_object_id=vOwnerTypeID,base_type_id=vBaseTypeID,system_hidden=psystem,object_type_owner=ptypeowner,container=pcontainer,hide_redundant_events=phideredundantevents WHERE object_type=poldname;
END
$$

--
-- Create procedure "osae_sp_pattern_lookup"
--
CREATE PROCEDURE osae_sp_pattern_lookup(IN Input VARCHAR(255))
BEGIN

END
$$

--
-- Create procedure "osae_sp_pattern_match_update"
--
DROP PROCEDURE IF EXISTS osae_sp_pattern_match_update$$
CREATE PROCEDURE osae_sp_pattern_match_update(IN pPattern VARCHAR(255), IN pOldName VARCHAR(255), IN pNewName VARCHAR(255))
BEGIN
DECLARE vPatternCount INT;
DECLARE vPatternID INT Default NULL;
    SELECT COUNT(pattern_id) INTO vPatternCount FROM osae_pattern WHERE pattern=pPattern;
    IF vPatternCount > 0 THEN
        SELECT pattern_id INTO vPatternID FROM osae_pattern WHERE pattern=pPattern;
        UPDATE osae_pattern_match SET `match`=pNewName WHERE pattern_id=vPatternID and `match`=pOldName;
    END IF; 
END
$$

--
-- Alter procedure "osae_sp_pattern_parse"
--
DROP PROCEDURE IF EXISTS osae_sp_pattern_parse$$
CREATE PROCEDURE osae_sp_pattern_parse(IN ppattern varchar(2000))
BEGIN
  # This script parses output and replaces placeholders with Objects, properties and other values.
  DECLARE vInput VARCHAR(2000) DEFAULT '';
  DECLARE vOutput VARCHAR(2000) DEFAULT '';  
  DECLARE vOld VARCHAR(200);  
  DECLARE vWorking VARCHAR(200); 
  DECLARE vDot INT DEFAULT 0;
  DECLARE vSpace1 INT DEFAULT 0;
  DECLARE vSpace2 INT DEFAULT 0;  
  DECLARE vObject VARCHAR(200);
  DECLARE vParam VARCHAR(255);  
  DECLARE vTemp VARCHAR(255);  
    SET vInput = ppattern; 
    SELECT INSTR(vInput,'[') INTO vSpace1;
    SELECT INSTR(vInput,']') INTO vSpace2;
        
    WHILE vSpace2 > vSpace1 DO 
      SELECT MID(vInput,vSpace1,vSpace2 - vSpace1 + 1) INTO vOld; 
      SELECT MID(vInput,vSpace1+1,vSpace2 - vSpace1 - 1) INTO vWorking; 
      #SELECT vOld, vWorking;     
      SELECT INSTR(vWorking,'.') INTO vDot;
      IF vDOT > 0 THEN
        SET vObject = LEFT(vWorking,vDot - 1);
        SET vParam = RIGHT(vWorking,LENGTH(vWorking) - vDot);
        IF vParam = 'State' THEN
          SELECT state_name INTO vTemp FROM osae_v_object WHERE object_name=vObject;        
          SET vInput = REPLACE(vInput,vOld,vTemp);
        ELSEIF vParam = 'Container' THEN
          SELECT container_name INTO vTemp FROM osae_v_object WHERE object_name=vObject;        
          SET vInput = REPLACE(vInput,vOld,vTemp);
        ELSE
          SELECT property_value INTO vTemp FROM osae_v_object_property WHERE object_name=vObject AND property_name=vParam;
          SET vInput = REPLACE(vInput,vOld,vTemp);          
        END IF;      
      END IF;
      SELECT INSTR(vInput,'[') INTO vSpace1;
      SELECT INSTR(vInput,']') INTO vSpace2;
    END WHILE;
    SELECT vInput;
END
$$

--
-- Alter procedure "osae_sp_process_recurring"
--
DROP PROCEDURE IF EXISTS osae_sp_process_recurring$$
CREATE PROCEDURE osae_sp_process_recurring()
BEGIN
DECLARE iRECURRINGID INT;
DECLARE vOBJECTNAME VARCHAR(400) DEFAULT '';
DECLARE vMETHODNAME VARCHAR(400) DEFAULT '';
DECLARE vPARAM1 VARCHAR(200);
DECLARE vPARAM2 VARCHAR(200);
DECLARE vSCRIPTNAME VARCHAR(200);
DECLARE iSCRIPTID INT;
DECLARE cINTERVAL CHAR(1);
DECLARE cSUNDAY CHAR(1);
DECLARE cMONDAY CHAR(1);
DECLARE cTUESDAY CHAR(1);
DECLARE cWEDNESDAY CHAR(1);
DECLARE cTHURSDAY CHAR(1);
DECLARE cFRIDAY CHAR(1);
DECLARE cSATURDAY CHAR(1);
DECLARE dRECURRINGDATE DATE;
DECLARE iRECURRINGMINUTES INT;
DECLARE dRECURRINGDAY INT;
DECLARE dRECURRINGTIME TIME;
DECLARE dCURDATE DATE;
DECLARE dCURDATETIME DATETIME;
DECLARE dCURDAYOFWEEK INT DEFAULT 0;
DECLARE dCURDAYOFMONTH INT DEFAULT 1;
DECLARE dCURDAY INT DEFAULT 1;
DECLARE iMATCHES INT DEFAULT 0;
DECLARE iDATEDIFF INT DEFAULT 0;
DECLARE done INT DEFAULT 0;  
DECLARE cur1 CURSOR FOR SELECT recurring_id,interval_unit,recurring_time,recurring_minutes,recurring_date,recurring_day,object_name,method_name,parameter_1,parameter_2,script_id, script_name, sunday,monday,tuesday,wednesday,thursday,friday,saturday FROM osae_v_schedule_recurring WHERE COALESCE(active,1)=1;
DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
    OPEN cur1; 
    Loop_Tag: LOOP
        IF done THEN
            Leave Loop_Tag;
        END IF;
        FETCH cur1 INTO iRECURRINGID,cINTERVAL,dRECURRINGTIME,iRECURRINGMINUTES,dRECURRINGDATE,dRECURRINGDAY,vOBJECTNAME,vMETHODNAME,vPARAM1,vPARAM2,iSCRIPTID,vSCRIPTNAME,cSUNDAY,cMONDAY,cTUESDAY,cWEDNESDAY,cTHURSDAY,cFRIDAY,cSATURDAY;
        CALL osae_sp_debug_log_add(CONCAT('ID=',iRECURRINGID,', Interval=',cINTERVAL,' Time=',dRECURRINGTIME,' Date=',dRECURRINGDATE),'sp_process_recurring'); 
        IF NOT done THEN
            IF cINTERVAL = 'Y' THEN
                SET dCURDATE = CURDATE();
                CALL osae_sp_debug_log_add(CONCAT('--IF ',dRECURRINGDATE,' < ',dCURDATE,' THEN'),'SYSTEM'); 
                IF dRECURRINGDATE < dCURDATE THEN
                    SET iDATEDIFF = DATEDIFF(dCURDATE,dRECURRINGDATE) / 365; 
                    CALL osae_sp_debug_log_add(CONCAT('sp_process_recurring: DateDiff=',iDATEDIFF),'SYSTEM'); 
                    SET dRECURRINGDATE = DATE_ADD(dRECURRINGDATE,INTERVAL iDATEDIFF YEAR);
                    IF dRECURRINGDATE < dCURDATE THEN 
                        SET dRECURRINGDATE = DATE_ADD(dRECURRINGDATE,INTERVAL 1 YEAR);                   
                    END IF;                                     
                END IF;
                CALL osae_sp_debug_log_add(CONCAT(dRECURRINGDATE,' ',TIME(dRECURRINGTIME)),'SYSTEM'); 
                SELECT COUNT(schedule_ID) INTO iMATCHES FROM osae_schedule_queue WHERE recurring_id=iRECURRINGID;      
                IF iMATCHES = 0 THEN
                    CALL osae_sp_schedule_queue_add (CONCAT(dRECURRINGDATE,' ',TIME(dRECURRINGTIME)),vOBJECTNAME,vMETHODNAME,vPARAM1,vPARAM2,vSCRIPTNAME,iRECURRINGID);
                END IF;
              ELSEIF cINTERVAL = 'T' THEN   
                SET dCURDATETIME = NOW();             
                SET dCURDATE = CURDATE();
                IF dCURDATETIME > ADDTIME(NOW(),SEC_TO_TIME(iRECURRINGMINUTES * 60)) THEN
                    SET dCURDAYOFWEEK = dCURDAYOFWEEK + 1;
                    If dCURDAYOFWEEK > 7 THEN
			SET dCURDAYOFWEEK = 1;
		    END IF;
                    SET dCURDATE=DATE_ADD(CURDATE(),INTERVAL 1 DAY);
                END IF; 
                CALL osae_sp_debug_log_add(CONCAT(dRECURRINGDATE,' ',TIME(dRECURRINGTIME)),'SYSTEM'); 
                SELECT COUNT(schedule_ID) INTO iMATCHES FROM osae_schedule_queue WHERE recurring_id=iRECURRINGID;      
                IF iMATCHES = 0 THEN
                    CALL osae_sp_schedule_queue_add (ADDTIME(NOW(),SEC_TO_TIME(iRECURRINGMINUTES * 60)),vOBJECTNAME,vMETHODNAME,vPARAM1,vPARAM2,vSCRIPTNAME,iRECURRINGID);
               END IF;               
            ELSEIF cINTERVAL = 'M' THEN                
                SET dCURDATE = CURDATE();
                SET dRECURRINGDATE = CONCAT(YEAR(NOW()),'-',MONTH(NOW()),'-' ,dRECURRINGDAY);                
                IF dRECURRINGDATE < dCURDATE THEN
                    CALL osae_sp_debug_log_add(CONCAT('sp_process_recurring: DateDiff=',iDATEDIFF),'SYSTEM');                
                    SET dRECURRINGDATE = DATE_ADD(dRECURRINGDATE,INTERVAL 1 MONTH);
                    IF dRECURRINGDATE < dCURDATE THEN 
                        SET dRECURRINGDATE = DATE_ADD(dRECURRINGDATE,INTERVAL 1 MONTH);                   
                    END IF;                                     
                END IF;
                CALL osae_sp_debug_log_add(CONCAT(dRECURRINGDATE,' ',TIME(dRECURRINGTIME)),'SYSTEM'); 
                SELECT COUNT(schedule_ID) INTO iMATCHES FROM osae_schedule_queue WHERE recurring_id=iRECURRINGID;      
                IF iMATCHES = 0 THEN
                    CALL osae_sp_schedule_queue_add (CONCAT(dRECURRINGDATE,' ',TIME(dRECURRINGTIME)),vOBJECTNAME,vMETHODNAME,vPARAM1,vPARAM2,vSCRIPTNAME,iRECURRINGID);
                END IF;               
            ELSEIF cINTERVAL = 'D' THEN                
                SET dCURDATETIME = NOW();
                SET dCURDATE = CURDATE();
                SET dCURDAYOFWEEK = DAYOFWEEK(NOW()); 
                SET dCURDAYOFMONTH = DAYOFMONTH(NOW());
  
                IF dCURDATETIME > CONCAT(dCURDATE,' ',dRECURRINGTIME) THEN
                    SET dCURDAYOFWEEK = dCURDAYOFWEEK + 1;
                    If dCURDAYOFWEEK > 7 THEN
			SET dCURDAYOFWEEK = 1;
		    END IF;
                    SET dCURDATE=DATE_ADD(CURDATE(),INTERVAL 1 DAY);
                END IF; 
                CALL osae_sp_debug_log_add(CONCAT('IF ',dCURDATETIME,' > ',dCURDATE,' ',dRECURRINGTIME,' Then Write new queue'),'SYSTEM');              
                IF dCURDAYOFWEEK = 1 AND cSUNDAY = 1 THEN
                    SELECT COUNT(schedule_ID) INTO iMATCHES FROM osae_schedule_queue WHERE recurring_id=iRECURRINGID;      
                    IF iMATCHES = 0 THEN
                        CALL osae_sp_schedule_queue_add (CONCAT(dCURDATE,' ',TIME(dRECURRINGTIME)),vOBJECTNAME,vMETHODNAME,vPARAM1,vPARAM2,vSCRIPTNAME,iRECURRINGID);
                    END IF; 
                END IF; 
                IF dCURDAYOFWEEK = 2 AND cMONDAY = 1 THEN                
                    SELECT COUNT(schedule_ID) INTO iMATCHES FROM osae_schedule_queue WHERE recurring_id=iRECURRINGID;      
                    IF iMATCHES = 0 THEN
                        CALL osae_sp_schedule_queue_add (CONCAT(dCURDATE,' ',TIME(dRECURRINGTIME)),vOBJECTNAME,vMETHODNAME,vPARAM1,vPARAM2,vSCRIPTNAME,iRECURRINGID);          
                    END IF; 
                END IF; 
                IF dCURDAYOFWEEK = 3 AND cTUESDAY = 1 THEN                
                    SELECT COUNT(schedule_ID) INTO iMATCHES FROM osae_schedule_queue WHERE recurring_id=iRECURRINGID;      
                    IF iMATCHES = 0 THEN
                        CALL osae_sp_schedule_queue_add (CONCAT(dCURDATE,' ',TIME(dRECURRINGTIME)),vOBJECTNAME,vMETHODNAME,vPARAM1,vPARAM2,vSCRIPTNAME,iRECURRINGID);
                    END IF; 
                END IF;                 
                IF dCURDAYOFWEEK = 4 AND cWEDNESDAY = 1 THEN                
                    SELECT COUNT(schedule_ID) INTO iMATCHES FROM osae_schedule_queue WHERE recurring_id=iRECURRINGID;      
                    IF iMATCHES = 0 THEN
                        CALL osae_sp_schedule_queue_add (CONCAT(dCURDATE,' ',TIME(dRECURRINGTIME)),vOBJECTNAME,vMETHODNAME,vPARAM1,vPARAM2,vSCRIPTNAME,iRECURRINGID);   
                    END IF; 
                END IF;  
                IF dCURDAYOFWEEK = 5 AND cTHURSDAY = 1 THEN                
                    SELECT COUNT(schedule_ID) INTO iMATCHES FROM osae_schedule_queue WHERE recurring_id=iRECURRINGID;      
                    IF iMATCHES = 0 THEN
                        CALL osae_sp_schedule_queue_add (CONCAT(dCURDATE,' ',TIME(dRECURRINGTIME)),vOBJECTNAME,vMETHODNAME,vPARAM1,vPARAM2,vSCRIPTNAME,iRECURRINGID);                    
                    END IF; 
                END IF;
                IF dCURDAYOFWEEK = 6 AND cFRIDAY = 1 THEN                
                    SELECT COUNT(schedule_ID) INTO iMATCHES FROM osae_schedule_queue WHERE recurring_id=iRECURRINGID;      
                    IF iMATCHES = 0 THEN
                        CALL osae_sp_schedule_queue_add (CONCAT(dCURDATE,' ',TIME(dRECURRINGTIME)),vOBJECTNAME,vMETHODNAME,vPARAM1,vPARAM2,vSCRIPTNAME,iRECURRINGID);                    
                    END IF; 
                END IF;
                IF dCURDAYOFWEEK = 7 AND cSATURDAY = 1 THEN                
                    SELECT COUNT(schedule_ID) INTO iMATCHES FROM osae_schedule_queue WHERE recurring_id=iRECURRINGID;      
                    IF iMATCHES = 0 THEN
                        CALL osae_sp_schedule_queue_add (CONCAT(dCURDATE,' ',TIME(dRECURRINGTIME)),vOBJECTNAME,vMETHODNAME,vPARAM1,vPARAM2,vSCRIPTNAME,iRECURRINGID);                    
                   END IF; 
                END IF;                                                                           
            END IF;         
        END IF;
     END LOOP;
    CLOSE cur1;   
END
$$

--
-- Create procedure "osae_sp_process_system_methods"
--
DROP PROCEDURE IF EXISTS osae_sp_process_system_methods$$
CREATE PROCEDURE osae_sp_process_system_methods()
BEGIN
DECLARE vMethodQueueID INT;
DECLARE vSystemCount INT;
DECLARE vObjectName VARCHAR(200);
DECLARE vObjectType VARCHAR(200);
DECLARE vBaseType VARCHAR(200);
DECLARE vMethod VARCHAR(400);
DECLARE vParam1 VARCHAR(400);
DECLARE vParam2 VARCHAR(400);
DECLARE vStateCount INT;
DECLARE vPropertyCount INT;

DECLARE done INT DEFAULT 0;  
DECLARE cur1 CURSOR FOR SELECT method_queue_id,object_name,object_type,method_name,parameter_1,parameter_2 FROM osae_v_method_queue WHERE object_owner='SYSTEM';
DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
    OPEN cur1; 
    Loop_Tag: LOOP
        IF done THEN
            Leave Loop_Tag;
        END IF;
        FETCH cur1 INTO vMethodQueueID,vObjectName,vObjectType,vMethod,vParam1,vParam2;
            CALL osae_sp_debug_log_add(CONCAT('SYSTEM handling ', vObjectName,' ',vMethod),'osae_sp_process_system_methods'); 
            DELETE FROM osae_method_queue WHERE method_queue_id = vMethodQueueID;
            #SELECT object_name,object_type,base_type INTO vObjectName,vObjectType,vBaseType FROM osae_v_object WHERE object_id=vObjectID;
            #SELECT method_name INTO vMethod FROM osae_object_type_method WHERE method_id=NEW.method_id;        
            # Here is the magic, if the Method Name matches a State, then the Method's Job is to Set that State, so look up the state
            SELECT count(state_name) INTO vStateCount FROM osae_v_object_type_state WHERE UPPER(state_name)=UPPER(vMethod) AND object_type=vObjectType; 
            IF vStateCount = 1 THEN   
                CALL osae_sp_object_state_set (vObjectName,vMethod,'SYSTEM','osae_sp_process_system_methods');
            ELSE
                SELECT count(property_name) INTO vPropertyCount FROM osae_v_object_type_property WHERE UPPER(property_name)=UPPER(vMethod) AND object_type=vObjectType; 
                IF vPropertyCount = 1 THEN   
                    CALL osae_sp_object_property_set (vObjectName,vMethod,NEW.parameter_1,'SYSTEM','osae_sp_process_system_methods');
                END IF;
            END IF;                
     END LOOP;
    CLOSE cur1;   
END
$$

--
-- Alter procedure "osae_sp_run_scheduled_methods"
--
DROP PROCEDURE osae_sp_run_scheduled_methods$$
CREATE PROCEDURE osae_sp_run_scheduled_methods()
BEGIN
DECLARE iSCHEDULEID INT;
DECLARE iOBJECTID INT DEFAULT 0;
DECLARE vObjectName VARCHAR(400) DEFAULT '';
DECLARE iMETHODID INT DEFAULT 0;
DECLARE vMethodName VARCHAR(400);
DECLARE vPARAM1 VARCHAR(200);
DECLARE vPARAM2 VARCHAR(200);
DECLARE iSCRIPTID INT DEFAULT 0;
DECLARE vSCRIPTPROCID INT DEFAULT 0;
DECLARE done INT DEFAULT 0;  
DECLARE scriptProc VARCHAR(200);
DECLARE cur1 CURSOR FOR SELECT schedule_ID,COALESCE(object_name,''),method_name,parameter_1,parameter_2,script_id FROM osae_v_schedule_queue WHERE queue_datetime < NOW();
DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
    #CALL osae_sp_debug_log_add('Starting to run osae_sp_run_scheduled_methods','osae_sp_run_scheduled_methods');
    OPEN cur1; 
    Loop_Tag: LOOP
        FETCH cur1 INTO iSCHEDULEID,vObjectName,vMethodName,vPARAM1,vPARAM2,iSCRIPTID;
        IF done THEN
            Leave Loop_Tag;
        END IF;
            CALL osae_sp_debug_log_add(CONCAT('Found Schedule to run:',iSCHEDULEID,'  Object=',vObjectName,'   ScriptID=',COALESCE(iSCRIPTID,0)),'osae_sp_run_scheduled_methods');
            IF vObjectName <> '' THEN
                CALL osae_sp_debug_log_add(CONCAT('Adding method to queue:',' Object=',vObjectName,'   Method=',vMethodName),'osae_sp_run_scheduled_methods');
                CALL osae_sp_method_queue_add(vObjectName,vMethodName,vPARAM1,vPARAM2,'SYSTEM','osae_sp_run_scheduled_methods');
            ELSEIF iSCRIPTID <> 0 THEN
                SELECT script_processor_id INTO vSCRIPTPROCID FROM osae_script WHERE script_id=iSCRIPTID;
                SELECT script_processor_plugin_name INTO scriptProc FROM osae_script_processors WHERE script_processor_id=vSCRIPTPROCID;
                CALL osae_sp_debug_log_add(CONCAT('Adding method to queue:',' Object=',scriptProc,'   ScriptID=',iSCRIPTID),'osae_sp_run_scheduled_methods');
                CALL osae_sp_method_queue_add(scriptProc,'RUN SCRIPT',iSCRIPTID,'SYSTEM','SYSTEM','osae_sp_run_scheduled_methods');
            ELSE
                CALL osae_sp_debug_log_add(CONCAT('ERROR Adding method to queue:',' vObjectName=',vObjectName,'   ScriptID=',iSCRIPTID),'osae_sp_run_scheduled_methods');
            END IF;         
            DELETE FROM osae_schedule_queue WHERE schedule_ID=iSCHEDULEID; 
        END LOOP;
    CLOSE cur1;
    CALL osae_sp_process_recurring();   
END
$$

--
-- Alter procedure "osae_sp_schedule_queue_add"
--
DROP PROCEDURE osae_sp_schedule_queue_add$$
CREATE PROCEDURE osae_sp_schedule_queue_add(IN pscheduleddate DATETIME, IN pobject VARCHAR(400), IN pmethod VARCHAR(400), IN pparameter1 VARCHAR(2000), IN pparameter2 VARCHAR(2000), IN pscript VARCHAR(200), IN precurringid INT(10))
BEGIN
DECLARE vObjectID INT DEFAULT NULL;
DECLARE vMethodID INT DEFAULT NULL;
DECLARE vScriptID INT DEFAULT NULL;
DECLARE vRecurringID INT DEFAULT NULL;
    SELECT script_id INTO vScriptID FROM osae_script WHERE UPPER(script_name)=UPPER(pscript);
    SELECT object_id, method_id INTO vObjectID, vMethodID FROM osae_v_object_method WHERE object_name = pobject AND (UPPER(method_name)=UPPER(pmethod) OR UPPER(method_label)=UPPER(pmethod));
    IF precurringid > 0 THEN
        SET vRecurringID = precurringid;
    END IF;
    INSERT INTO osae_schedule_queue (queue_datetime,object_id,method_id,parameter_1,parameter_2,script_id,recurring_id) VALUES(pscheduleddate,vObjectID,vMethodID,pparameter1,pparameter2,vScriptID,vRecurringID);
END
$$

--
-- Create procedure "osae_sp_server_log_clear"
--
DROP PROCEDURE IF EXISTS osae_sp_server_log_clear$$
CREATE PROCEDURE osae_sp_server_log_clear()
BEGIN
 DELETE
   FROM osae_log;
END
$$

--
-- Create procedure "osae_sp_server_log_get"
--
DROP PROCEDURE IF EXISTS osae_sp_server_log_get$$
CREATE PROCEDURE osae_sp_server_log_get(IN pinfo bit,
IN pdebug bit,
IN perror bit,
IN psource varchar(50))
BEGIN
 SELECT
   ID,DATE_FORMAT(`Date`,'%m/%d %h:%i:%s %p') as `Date`,`Thread`,`Level`,`Logger`,`Message`,`Exception`
 FROM osae_log
 WHERE ((Level = 'INFO' AND pinfo = 1)
 OR (Level = 'DEBUG' AND pdebug = 1)
 OR (Level = 'ERROR' AND perror = 1))
 AND (Logger = psource OR psource = 'ALL')

 ORDER BY Date DESC, ID DESC
 LIMIT 500;
END
$$

--
-- Create procedure "osae_sp_system_count_plugins"
--
DROP PROCEDURE IF EXISTS osae_sp_system_count_plugins$$
CREATE PROCEDURE osae_sp_system_count_plugins()
BEGIN
DECLARE vPluginCount INT;
DECLARE vOldCount INT;
DECLARE iPluginCount INT;
DECLARE iPluginEnabledCount INT;
DECLARE iPluginRunningCount INT;  
DECLARE iPluginErrorCount INT;
DECLARE bDone INT; 
DECLARE vOutput VARCHAR(200);
DECLARE oCount INT;
DECLARE var1 CHAR(40);
  
DECLARE curs CURSOR FOR SELECT object_name FROM osae_v_object WHERE base_type='PLUGIN' AND enabled=1 AND state_name='OFF';
DECLARE CONTINUE HANDLER FOR NOT FOUND SET bDone = 1;
    SET vOldCount = (SELECT COUNT(property_value) FROM osae_v_object_property WHERE object_name='SYSTEM' AND property_name='Plugins Running');  
    SET iPluginErrorCount = (SELECT COUNT(object_name) FROM osae_v_object WHERE base_type='PLUGIN' AND enabled=1 AND state_name='OFF');
 
   -- IF vOldCount != iPluginErrorCount THEN  
        SET iPluginCount = (SELECT COUNT(object_name) FROM osae_v_object WHERE base_type='PLUGIN');
        SET iPluginEnabledCount = (SELECT COUNT(object_name) FROM osae_v_object WHERE base_type='PLUGIN' AND enabled=1);
        SET iPluginRunningCount = (SELECT COUNT(object_name) FROM osae_v_object WHERE base_type='PLUGIN' AND enabled=1 AND state_name='ON');

        CALL osae_sp_object_property_set('SYSTEM','Plugins Found',iPluginCount,'SYSTEM','osae_sp_system_count_plugins');
        CALL osae_sp_object_property_set('SYSTEM','Plugins Enabled',iPluginEnabledCount,'SYSTEM','osae_sp_system_count_plugins');
        CALL osae_sp_object_property_set('SYSTEM','Plugins Running',iPluginRunningCount,'SYSTEM','osae_sp_system_count_plugins');
        CALL osae_sp_object_property_set('SYSTEM','Plugins Errored',iPluginErrorCount,'SYSTEM','osae_sp_system_count_plugins');

        CASE iPluginErrorCount
          WHEN 0 THEN 
            SET vOutput = 'All Plugins are Running';
            CALL osae_sp_object_property_set('SYSTEM','Plugins',vOutput,'SYSTEM','osae_sp_system_count_plugins');            
          WHEN 1 THEN 
            SET vOutput = (SELECT COALESCE(object_name,'Unknown') FROM osae_v_object WHERE base_type='PLUGIN' AND enabled=1 AND state_name='OFF' LIMIT 1);
            SET vOutput = CONCAT(vOutput,' is Stopped!');
            CALL osae_sp_object_property_set('SYSTEM','Plugins',vOutput,'SYSTEM','osae_sp_system_count_plugins');
          ELSE
            OPEN curs;
            SET oCount = 0;
            SET bDone = 0;
            SET vOutput = '';
            REPEAT
              FETCH curs INTO var1;
              IF oCount < iPluginErrorCount THEN
                IF oCount = 0 THEN
                  SET vOutput = CONCAT(vOutput,CONCAT(' and ', var1, ' are Stopped!'));
                ELSEIF oCount = 1 THEN
                  SET vOutput = CONCAT(var1, vOutput);
                ELSE
                  SET vOutput = CONCAT(var1, ', ', vOutput);
                END IF;
                SET oCount = oCount + 1;
              END IF;
            UNTIL bDone END REPEAT;
            CLOSE curs;
            CALL osae_sp_object_property_set('SYSTEM','Plugins',vOutput,'SYSTEM','osae_sp_system_count_plugins');
         END CASE;
 --     END IF;
END
$$

--
-- Alter trigger "osae_tr_object_before_update"
--
DROP TRIGGER IF EXISTS osae_tr_object_before_update$$
CREATE TRIGGER osae_tr_object_before_update
	BEFORE UPDATE
	ON osae_object
	FOR EACH ROW
BEGIN
DECLARE vState VARCHAR(50);
DECLARE vEventCount INT;
DECLARE vHideRedundantRvents INT;
DECLARE vEvent VARCHAR(200);
DECLARE vSystemID INT;
DECLARE vPlaceID INT;
DECLARE vContainer VARCHAR(200);
DECLARE vContainerType VARCHAR(200);
DECLARE vPlaceOnID INT;
DECLARE vPersonID INT;
    IF OLD.object_type_id <> NEW.object_type_id THEN
        DELETE FROM osae_object_property WHERE object_id=OLD.object_id;
        INSERT INTO osae_object_property (object_id,object_type_property_id,property_value) SELECT OLD.object_id, property_id, property_default FROM osae_object_type_property WHERE object_type_id=NEW.object_type_id;
        
        DELETE FROM osae_object_state_history WHERE object_id=OLD.object_id;
        INSERT INTO osae_object_state_history (object_id,state_id) SELECT OLD.object_id, state_id FROM osae_object_type_state WHERE object_type_id=NEW.object_type_id;        
        
        #DELETE FROM osae_object_property WHERE object_id=OLD.object_id;
        #INSERT INTO osae_object_property (object_id,object_type_property_id,property_value) SELECT OLD.object_id, property_id, property_default FROM osae_object_type_property WHERE object_type_id=NEW.object_type_id;
        DELETE FROM osae_object_event_script WHERE object_id=OLD.object_id;
    ELSE
        #Changing an Object's Type is so severe, we are only going to check containers and states if the object type is the same
        SET vContainerType = (SELECT base_type FROM osae_v_object WHERE object_id=NEW.container_id);
        SET vPersonID = (SELECT object_type_id FROM osae_object_type WHERE object_type='PERSON');
        IF OLD.object_type_id = vPersonID AND OLD.container_id <> NEW.container_id AND vContainerType='PLACE' THEN
            SET vContainer = (SELECT object_name FROM osae_v_object WHERE object_id=NEW.container_id);
            CALL osae_sp_method_queue_add (vContainer,'ON','','','SYSTEM','Auto-Occupancy Logic');
        END IF;
        IF OLD.state_id <> NEW.state_id THEN
            SET NEW.last_state_change=NOW();
            UPDATE osae_object_state_history SET times_this_hour=times_this_hour + 1, times_this_day=times_this_day + 1,times_this_month=times_this_month+1,times_this_year=times_this_year+1,times_ever=times_ever + 1 WHERE object_id=OLD.object_id AND state_id=NEW.state_id;
            INSERT INTO osae_object_state_change_history (object_id, state_id) VALUES (OLD.object_id, NEW.state_id);
        END IF;      
    END IF;

    IF OLD.object_name <> NEW.object_name THEN
      UPDATE osae_object_property SET property_value=NEW.object_name WHERE property_value=OLD.object_name;
    END IF; 
  
END
$$

--
-- Alter trigger "osae_tr_object_type_properties_after_insert"
--
DROP TRIGGER IF EXISTS osae_tr_object_type_properties_after_insert$$
CREATE TRIGGER osae_tr_object_type_properties_after_insert
	AFTER INSERT
	ON osae_object_type_property
	FOR EACH ROW
BEGIN
    INSERT INTO osae_object_property (object_id,object_type_property_id,property_value) SELECT object_id,NEW.property_id,NEW.property_default FROM osae_object WHERE object_type_id=NEW.object_type_id;
END
$$

DELIMITER ;

--
-- Alter view "osae_v_object"
--
CREATE OR REPLACE 
VIEW osae_v_object
AS
	select `osae_object`.`object_id` AS `object_id`,`osae_object`.`object_name` AS `object_name`,`osae_object`.`object_description` AS `object_description`,`osae_object`.`object_value` AS `object_value`,`osae_object`.`address` AS `address`,`osae_object`.`last_updated` AS `last_updated`,`osae_object`.`last_state_change` AS `last_state_change`,`osae_object`.`enabled` AS `enabled`,`osae_object_type`.`object_type_id` AS `object_type_id`,`osae_object_type`.`object_type` AS `object_type`,`osae_object_type`.`object_type_description` AS `object_type_description`,`osae_object_type`.`plugin_object_id` AS `plugin_object_id`,`osae_object_type`.`system_hidden` AS `system_hidden`,`osae_object_type`.`object_type_owner` AS `object_type_owner`,`osae_object_type`.`base_type_id` AS `base_type_id`,`osae_object_type`.`container` AS `container`,`osae_object_type_state`.`state_id` AS `state_id`,coalesce(`osae_object_type_state`.`state_name`,'') AS `state_name`,coalesce(`osae_object_type_state`.`state_label`,'') AS `state_label`,`objects_2`.`object_name` AS `owned_by`,`object_types_2`.`object_type` AS `base_type`,`objects_1`.`object_name` AS `container_name`,`osae_object`.`container_id` AS `container_id`,timestampdiff(SECOND,`osae_object`.`last_state_change`,now()) AS `time_in_state` from (((((`osae_object` left join `osae_object_type` on((`osae_object`.`object_type_id` = `osae_object_type`.`object_type_id`))) left join `osae_object_type` `object_types_2` on((`osae_object_type`.`base_type_id` = `object_types_2`.`object_type_id`))) left join `osae_object` `objects_2` on((`osae_object_type`.`plugin_object_id` = `objects_2`.`object_id`))) left join `osae_object_type_state` on(((`osae_object_type`.`object_type_id` = `osae_object_type_state`.`object_type_id`) and (`osae_object_type_state`.`state_id` = `osae_object`.`state_id`)))) left join `osae_object` `objects_1` on((`objects_1`.`object_id` = `osae_object`.`container_id`)));

--
-- Alter view "osae_v_object_property"
--
CREATE OR REPLACE 
VIEW osae_v_object_property
AS
	select `osae_object`.`object_id` AS `object_id`,`osae_object`.`object_name` AS `object_name`,`osae_object`.`object_description` AS `object_description`,`osae_object`.`state_id` AS `state_id`,`osae_object`.`object_value` AS `object_value`,`osae_object`.`address` AS `address`,`osae_object`.`container_id` AS `container_id`,`osae_object`.`enabled` AS `enabled`,`osae_object`.`last_updated` AS `object_last_updated`,coalesce(`osae_object`.`last_state_change`,now()) AS `last_state_change`,`osae_object_property`.`last_updated` AS `last_updated`,`osae_object_property`.`object_property_id` AS `object_property_id`,`osae_object_property`.`object_type_property_id` AS `object_type_property_id`,coalesce(`osae_object_property`.`property_value`,'') AS `property_value`,`osae_object_type`.`object_type_id` AS `object_type_id`,`osae_object_type`.`object_type_description` AS `object_type_description`,`osae_object_type`.`object_type` AS `object_type`,`osae_object_type`.`system_hidden` AS `system_hidden`,`osae_object_type`.`plugin_object_id` AS `plugin_object_id`,`osae_object_type`.`base_type_id` AS `base_type_id`,`osae_object_type`.`object_type_owner` AS `object_type_owner`,`osae_object_type_property`.`property_datatype` AS `property_datatype`,`osae_object_type_property`.`property_name` AS `property_name`,`osae_object_type_property`.`property_default` AS `property_default`,`osae_object_type_property`.`property_id` AS `property_id`,`osae_object_type_property`.`track_history` AS `track_history`,`ot1`.`object_type` AS `base_type`,`osae_object_type_state`.`state_name` AS `state_name` from (((((`osae_object` join `osae_object_property` on((`osae_object`.`object_id` = `osae_object_property`.`object_id`))) join `osae_object_type` on((`osae_object`.`object_type_id` = `osae_object_type`.`object_type_id`))) join `osae_object_type_property` on(((`osae_object_type`.`object_type_id` = `osae_object_type_property`.`object_type_id`) and (`osae_object_property`.`object_type_property_id` = `osae_object_type_property`.`property_id`)))) left join `osae_object_type_state` on((`osae_object`.`state_id` = `osae_object_type_state`.`state_id`))) join `osae_object_type` `ot1` on((`osae_object_type`.`base_type_id` = `ot1`.`object_type_id`)));

--
-- Alter view "osae_v_screen_object"
--
CREATE OR REPLACE 
VIEW osae_v_screen_object
AS
	select `so`.`screen_object_id` AS `screen_object_id`,`so`.`screen_id` AS `screen_id`,`so`.`object_id` AS `object_id`,`so`.`control_id` AS `control_id`,`screen`.`object_name` AS `screen_name`,`co`.`enabled` AS `control_enabled`,`co`.`object_name` AS `control_name`,`oo`.`object_name` AS `object_name`,`ot`.`object_type` AS `control_type`,`oo`.`last_updated` AS `last_updated`,`oo`.`last_state_change` AS `last_state_change`,timestampdiff(MINUTE,`oo`.`last_state_change`,now()) AS `time_in_state`,`ots`.`state_name` AS `state_name` from (((((`osae_screen_object` `so` join `osae_object` `screen` on((`screen`.`object_id` = `so`.`screen_id`))) join `osae_object` `oo` on((`so`.`object_id` = `oo`.`object_id`))) join `osae_object` `co` on((`so`.`control_id` = `co`.`object_id`))) join `osae_object_type` `ot` on((`ot`.`object_type_id` = `co`.`object_type_id`))) left join `osae_object_type_state` `ots` on((`ots`.`state_id` = `oo`.`state_id`)));

DELIMITER $$

--
-- Alter event "osae_ev_minute_maint"
--
ALTER EVENT osae_ev_minute_maint
	DO 
BEGIN
    CALL osae_sp_object_property_set('SYSTEM','Date',CURDATE(),'SYSTEM','osae_ev_minute_maint'); 
    CALL osae_sp_object_property_set('SYSTEM','Day Of Week',DAYOFWEEK(CURDATE()),'SYSTEM','osae_ev_minute_maint'); 
    CALL osae_sp_object_property_set('SYSTEM','Day Of Month',DAYOFMONTH(CURDATE()),'SYSTEM','osae_ev_minute_maint'); 
    CALL osae_sp_run_scheduled_methods; 
    #CALL osae_sp_debug_log_add('Minute timer','SYSTEM');  
END
$$

--
-- Alter event "osae_ev_off_timer"
--
ALTER EVENT osae_ev_off_timer
	DO 
BEGIN
  DECLARE vObjectName  VARCHAR(200);
  DECLARE iLoopCount   INT DEFAULT 0;
  DECLARE iMethodCount INT DEFAULT 0;
  DECLARE iStateCount  INT DEFAULT 0;
  DECLARE done         INT DEFAULT 0;
  DECLARE cur1 CURSOR FOR SELECT object_name FROM osae_v_object_property WHERE state_name <> 'OFF' AND property_name = 'OFF TIMER' AND property_value IS NOT NULL AND property_value <> '' AND subtime(now(), sec_to_time(property_value)) > object_last_updated;
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;
  DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
  
  CALL osae_sp_object_property_set('SYSTEM', 'Time', curtime(), 'SYSTEM', 'osae_ev_off_timer');
  CALL osae_sp_object_property_set('SYSTEM', 'Time AMPM', DATE_FORMAT(now(), '%h:%i %p'), 'SYSTEM', 'osae_ev_off_timer');
  CALL osae_sp_process_system_methods();
  CALL osae_sp_system_count_occupants();

  CALL osae_sp_system_count_plugins();
  SELECT count(object_name)
  INTO
    iLoopCount
  FROM
    osae_v_object_property
  WHERE
    state_name <> 'OFF'
    AND property_name = 'OFF TIMER'
    AND property_value IS NOT NULL
    AND property_value <> ''
    AND subtime(now(), sec_to_time(property_value)) > object_last_updated;
  OPEN cur1;

Loop_Tag:
  LOOP
    FETCH cur1 INTO vObjectName;
    IF done THEN
      LEAVE Loop_Tag;
    END IF;
    SELECT count(method_id)
    INTO
      iMethodCount
    FROM
      osae_v_object_method
    WHERE
      upper(object_name) = upper(vObjectName)
      AND upper(method_name) = 'OFF';
    IF iMethodCount > 0 THEN
      CALL osae_sp_debug_log_add(concat('Turning ', vObjectName, ' Off'), 'osae_ev_off_timer');
      CALL osae_sp_method_queue_add(vObjectName, 'OFF', '', '', 'SYSTEM', 'osae_ev_off_timer');
    ELSE
      SELECT count(state_id)
      INTO
        iStateCount
      FROM
        osae_v_object_state
      WHERE
        upper(object_name) = upper(vObjectName)
        AND upper(state_name) = 'OFF';
      IF iStateCount > 0 THEN
        CALL osae_sp_debug_log_add(concat('Turning ', vObjectName, ' Off'), 'osae_ev_off_timer');
        CALL osae_sp_object_state_set(vObjectName, 'OFF', 'SYSTEM', 'osae_ev_off_timer');
      END IF;
    END IF;
  END LOOP;
  CLOSE cur1;

  SELECT count(method_id) INTO iMethodCount FROM osae_v_object_method;
END
$$

DELIMITER ;

--
-- Enable foreign keys
--
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;


CALL osae_sp_object_type_add ('SYSTEM','Core System Data','SYSTEM','SYSTEM',1,1,1,1);
CALL osae_sp_object_type_state_add('HOME','Home','SYSTEM');
CALL osae_sp_object_type_state_add('AWAY','Away','SYSTEM');
CALL osae_sp_object_type_state_add('SLEEP','Sleep','SYSTEM');
CALL osae_sp_object_type_event_add('OCCUPANTS','Set Occupants','SYSTEM');
CALL osae_sp_object_type_event_add('AWAY','State Set to Away','SYSTEM');
CALL osae_sp_object_type_event_add('HOME','State Set to Home','SYSTEM');
CALL osae_sp_object_type_event_add('SLEEP','State Set to Sleep','SYSTEM');
CALL osae_sp_object_type_event_add('OCCUPIED LOCATIONS','Occupied Locations Set','SYSTEM');
CALL osae_sp_object_type_event_add('PLUGINS ERRORED','Plugins Errored','SYSTEM');
CALL osae_sp_object_type_method_add('OCCUPANTS','Set Occupants','SYSTEM','Number of Occupants','','0','');
CALL osae_sp_object_type_method_add('AWAY','Set State to Away','SYSTEM','','','','');
CALL osae_sp_object_type_method_add('HOME','Set State to Home','SYSTEM','','','','');
CALL osae_sp_object_type_method_add('SLEEP','Set State to Sleep','SYSTEM','','','','');
CALL osae_sp_object_type_property_add('Occupants','Integer','','SYSTEM',0);
CALL osae_sp_object_type_property_add('ZIP Code','String','','SYSTEM',0);
CALL osae_sp_object_type_property_add('Latitude','Integer','','SYSTEM',0);
CALL osae_sp_object_type_property_add('Longitude','Integer','','SYSTEM',0);
CALL osae_sp_object_type_property_add('Date','DateTime','','SYSTEM',0);
CALL osae_sp_object_type_property_add('Time','DateTime','','SYSTEM',0);
CALL osae_sp_object_type_property_add('Day Of Week','Integer','','SYSTEM',0);
CALL osae_sp_object_type_property_add('Violations','Integer','','SYSTEM',0);
CALL osae_sp_object_type_property_add('Occupant String','String','','SYSTEM',0);
CALL osae_sp_object_type_property_add('Day Of Month','Integer','','SYSTEM',0);
CALL osae_sp_object_type_property_add('Time AMPM','DateTime','','SYSTEM',0);
CALL osae_sp_object_type_property_add('Occupied Location String','String','','SYSTEM',0);
CALL osae_sp_object_type_property_add('Occupied Locations','Integer','','SYSTEM',0);
CALL osae_sp_object_type_property_add('DB Version','String','','SYSTEM',0);
CALL osae_sp_object_type_property_add('Debug','Boolean','TRUE','SYSTEM',0);
CALL osae_sp_object_type_property_add('Prune Logs','Boolean','TRUE','SYSTEM',0);
CALL osae_sp_object_type_property_add('Plugins Found','Integer','','SYSTEM',1);
CALL osae_sp_object_type_property_add('Plugins Running','Integer','','SYSTEM',1);
CALL osae_sp_object_type_property_add('Plugins Enabled','Integer','','SYSTEM',1);
CALL osae_sp_object_type_property_add('Plugins Errored','Integer','','SYSTEM',1);
CALL osae_sp_object_type_property_add('Plugins','String','','SYSTEM',0);




CALL osae_sp_object_type_add ('CONTROL CLICK IMAGE','Control - Click Control','','CONTROL',0,1,0,1);
CALL osae_sp_object_type_property_add('X','Integer','','CONTROL CLICK IMAGE',0);
CALL osae_sp_object_type_property_add('Y','Integer','','CONTROL CLICK IMAGE',0);
CALL osae_sp_object_type_property_add('Normal Image','File','','CONTROL CLICK IMAGE',0);
CALL osae_sp_object_type_property_add('Press Object Name','String','','CONTROL CLICK IMAGE',0);
CALL osae_sp_object_type_property_add('Press Method Name','String','','CONTROL CLICK IMAGE',0);
CALL osae_sp_object_type_property_add('Press Method Param 1','String','','CONTROL CLICK IMAGE',0);
CALL osae_sp_object_type_property_add('Press Method Param 2','String','','CONTROL CLICK IMAGE',0);
CALL osae_sp_object_type_property_add('ZOrder','Integer','','CONTROL CLICK IMAGE',0);
CALL osae_sp_object_type_property_add('Pressed Image','File','','CONTROL CLICK IMAGE',0);
CALL osae_sp_object_type_property_add('Release Method Name','String','','CONTROL CLICK IMAGE',0);
CALL osae_sp_object_type_property_add('Release Object Name','String','','CONTROL CLICK IMAGE',0);
CALL osae_sp_object_type_property_add('Release Method Param 1','String','','CONTROL CLICK IMAGE',0);
CALL osae_sp_object_type_property_add('Press Script Param 2','String','','CONTROL CLICK IMAGE',0);
CALL osae_sp_object_type_property_add('Press Script Param 1','String','','CONTROL CLICK IMAGE',0);
CALL osae_sp_object_type_property_add('Press Script Name','String','','CONTROL CLICK IMAGE',0);
CALL osae_sp_object_type_property_add('Release Method Param 2','String','','CONTROL CLICK IMAGE',0);
CALL osae_sp_object_type_property_add('Release Script Name','String','','CONTROL CLICK IMAGE',0);
CALL osae_sp_object_type_property_add('Release Script Param 1','String','','CONTROL CLICK IMAGE',0);
CALL osae_sp_object_type_property_add('Release Script Param 2','String','','CONTROL CLICK IMAGE',0);





CALL osae_sp_object_type_add ('CONTROL STATE IMAGE','Control - Object State','','CONTROL',0,1,0,1);
CALL osae_sp_object_type_property_add('Object Name','String','','CONTROL STATE IMAGE',0);
CALL osae_sp_object_type_property_add('State 1 Name','String','','CONTROL STATE IMAGE',0);
CALL osae_sp_object_type_property_add('State 2 Name','String','','CONTROL STATE IMAGE',0);
CALL osae_sp_object_type_property_add('State 3 Name','String','','CONTROL STATE IMAGE',0);
CALL osae_sp_object_type_property_add('State 1 Image','File','','CONTROL STATE IMAGE',0);
CALL osae_sp_object_type_property_add('State 2 Image','File','','CONTROL STATE IMAGE',0);
CALL osae_sp_object_type_property_add('State 3 Image','File','','CONTROL STATE IMAGE',0);
CALL osae_sp_object_type_property_add('State 1 X','Integer','','CONTROL STATE IMAGE',0);
CALL osae_sp_object_type_property_add('State 1 Y','Integer','','CONTROL STATE IMAGE',0);
CALL osae_sp_object_type_property_add('State 2 X','Integer','','CONTROL STATE IMAGE',0);
CALL osae_sp_object_type_property_add('State 2 Y','Integer','','CONTROL STATE IMAGE',0);
CALL osae_sp_object_type_property_add('State 3 X','Integer','','CONTROL STATE IMAGE',0);
CALL osae_sp_object_type_property_add('State 3 Y','Integer','','CONTROL STATE IMAGE',0);
CALL osae_sp_object_type_property_add('ZOrder','Integer','','CONTROL STATE IMAGE',0);
CALL osae_sp_object_type_property_add('State 1 Image 2','File','','CONTROL STATE IMAGE',0);
CALL osae_sp_object_type_property_add('State 1 Image 3','File','','CONTROL STATE IMAGE',0);
CALL osae_sp_object_type_property_add('State 1 Image 4','File','','CONTROL STATE IMAGE',0);
CALL osae_sp_object_type_property_add('State 2 Image 2','File','','CONTROL STATE IMAGE',0);
CALL osae_sp_object_type_property_add('State 2 Image 3','File','','CONTROL STATE IMAGE',0);
CALL osae_sp_object_type_property_add('State 2 Image 4','File','','CONTROL STATE IMAGE',0);
CALL osae_sp_object_type_property_add('Repeat Animation','Boolean','TRUE','CONTROL STATE IMAGE',0);
CALL osae_sp_object_type_property_add('Frame Delay','Integer','100','CONTROL STATE IMAGE',0);
CALL osae_sp_object_type_property_add('Show Slider','Boolean','','CONTROL STATE IMAGE',0);
CALL osae_sp_object_type_property_add('State 3 Image 2','File','','CONTROL STATE IMAGE',0);
CALL osae_sp_object_type_property_add('State 3 Image 3','File','','CONTROL STATE IMAGE',0);
CALL osae_sp_object_type_property_add('State 3 Image 4','File','','CONTROL STATE IMAGE',0);
CALL osae_sp_object_type_property_add('Slider Method','String','','CONTROL STATE IMAGE',0);





CALL osae_sp_object_type_add ('SPEECH','Generic Plugin Class','Speech','PLUGIN',1,0,0,1);
CALL osae_sp_object_type_state_add('ON','Running','SPEECH');
CALL osae_sp_object_type_state_add('OFF','Stopped','SPEECH');
CALL osae_sp_object_type_event_add('ON','Started','SPEECH');
CALL osae_sp_object_type_event_add('OFF','Stopped','SPEECH');
CALL osae_sp_object_type_method_add('ON','On','SPEECH','','','','');
CALL osae_sp_object_type_method_add('OFF','Off','SPEECH','','','','');
CALL osae_sp_object_type_method_add('SPEAK','Say','SPEECH','Message','','Hello','');
CALL osae_sp_object_type_method_add('SPEAKFROM','Say From List','SPEECH','Object Name','Property Name','Speech List','Greetings');
CALL osae_sp_object_type_method_add('PLAY','Play','SPEECH','File','','','');
CALL osae_sp_object_type_method_add('PLAYFROM','Play From List','SPEECH','List','','','');
CALL osae_sp_object_type_method_add('STOP','Stop','SPEECH','','','','');
CALL osae_sp_object_type_method_add('PAUSE','Pause','SPEECH','','','','');
CALL osae_sp_object_type_method_add('MUTEVR','Mute the Microphone','SPEECH','','','','');
CALL osae_sp_object_type_method_add('SETVOICE','Set Voice','SPEECH','Voice','','Anna','');
CALL osae_sp_object_type_method_add('SETTTSRATE','Set TTS Rate','SPEECH','Rate','','0','');
CALL osae_sp_object_type_method_add('SETTTSVOLUME','Set TTS Volume','SPEECH','Volume','','100','');
CALL osae_sp_object_type_property_add('Computer Name','String','','SPEECH',0);
CALL osae_sp_object_type_property_add('VR Input Muted','Boolean','TRUE','SPEECH',0);
CALL osae_sp_object_type_property_add('Voice','String','','SPEECH',0);
CALL osae_sp_object_type_property_add('Voices','List','','SPEECH',0);
CALL osae_sp_object_type_property_add('VR Enabled','Boolean','FALSE','SPEECH',0);
CALL osae_sp_object_type_property_add('VR Sleep Phrase','String','','SPEECH',0);
CALL osae_sp_object_type_property_add('VR Wake Phrase','String','','SPEECH',0);
CALL osae_sp_object_type_property_add('VR Sleep Response','String','','SPEECH',0);
CALL osae_sp_object_type_property_add('VR Wake Response','String','','SPEECH',0);
CALL osae_sp_object_type_property_add('System Plugin','Boolean','FALSE','SPEECH',0);
CALL osae_sp_object_type_property_add('TTS Rate','Integer','','SPEECH',0);
CALL osae_sp_object_type_property_add('TTS Volume','Integer','','SPEECH',0);
CALL osae_sp_object_type_property_add('Speaking','Boolean','FALSE','SPEECH',0);
CALL osae_sp_object_type_property_add('Debug','Boolean','FALSE','SPEECH',0);


CALL osae_sp_object_type_add ('SCRIPT PROCESSOR','Generic Plugin Class','Script Processor','PLUGIN',1,0,0,1);
CALL osae_sp_object_type_state_add('ON','Running','SCRIPT PROCESSOR');
CALL osae_sp_object_type_state_add('OFF','Stopped','SCRIPT PROCESSOR');
CALL osae_sp_object_type_event_add('ON','Started','SCRIPT PROCESSOR');
CALL osae_sp_object_type_event_add('OFF','Stopped','SCRIPT PROCESSOR');
CALL osae_sp_object_type_method_add('ON','Start','SCRIPT PROCESSOR','','','','');
CALL osae_sp_object_type_method_add('OFF','Stop','SCRIPT PROCESSOR','','','','');
CALL osae_sp_object_type_method_add('RUN SCRIPT','Run Script','SCRIPT PROCESSOR','','','','');
CALL osae_sp_object_type_property_add('System Plugin','Boolean','TRUE','SCRIPT PROCESSOR',0);
CALL osae_sp_object_type_property_add('Debug','Boolean','FALSE','SCRIPT PROCESSOR',0);

CALL osae_sp_object_type_add ('JABBER','Jabber Plugin','Jabber','PLUGIN',1,1,0,1);
CALL osae_sp_object_type_state_add('ON','Running','JABBER');
CALL osae_sp_object_type_state_add('OFF','Stopped','JABBER');
CALL osae_sp_object_type_event_add('ON','Started','JABBER');
CALL osae_sp_object_type_event_add('OFF','Stopped','JABBER');
CALL osae_sp_object_type_method_add('SEND MESSAGE','Send Message','JABBER','To','Message','','');
CALL osae_sp_object_type_method_add('SEND FROM LIST','Send From List','JABBER','To','List','','');
CALL osae_sp_object_type_property_add('Username','String','','JABBER',0);
CALL osae_sp_object_type_property_add('Password','String','','JABBER',0);
CALL osae_sp_object_type_property_add('System Plugin','Boolean','TRUE','JABBER',0);
CALL osae_sp_object_type_property_add('Debug','Boolean','FALSE','JABBER',0);


CALL osae_sp_object_type_add ('BLUETOOTH','Bluetooth Plugin','','PLUGIN',1,0,0,1);
CALL osae_sp_object_type_state_add('ON','Running','BLUETOOTH');
CALL osae_sp_object_type_state_add('OFF','Disabled','BLUETOOTH');
CALL osae_sp_object_type_event_add('ON','Enabled','BLUETOOTH');
CALL osae_sp_object_type_event_add('OFF','Disabled','BLUETOOTH');
CALL osae_sp_object_type_method_add('ON','Enable','BLUETOOTH','','','','');
CALL osae_sp_object_type_method_add('OFF','Disable','BLUETOOTH','','','','');
CALL osae_sp_object_type_property_add('Scan Interval','Integer','60','BLUETOOTH',0);
CALL osae_sp_object_type_property_add('Discover Length','Integer','8','BLUETOOTH',0);
CALL osae_sp_object_type_property_add('Learning Mode','Boolean','TRUE','BLUETOOTH',0);
CALL osae_sp_object_type_property_add('Computer Name','String','','BLUETOOTH',0);
CALL osae_sp_object_type_property_add('System Plugin','Boolean','FALSE','BLUETOOTH',0);
CALL osae_sp_object_type_property_add('Debug','Boolean','FALSE','BLUETOOTH',0);







-- Set DB version 
CALL osae_sp_object_property_set('SYSTEM', 'DB Version', '0.4.4', '', '');